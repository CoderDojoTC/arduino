{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CoderDojo Twin Cities Arduino Resources Welcome! This web site is for students and mentors that are participating in the Twin Cities CoderDojo sessions using the Arduino. Please let one of the mentors know if you have feedback that you think will help others. Course Types There are three types of courses in the CoderDojo Twin Cities Arudino: Online Courses - These courses are taught in virtual environments and don't require any hardware for our students. We use web sites like TinkerCad to simulate the behavior of Arduino devices. Hardware Courses - These courses require you to have general Arduino hardware and sensors used by the students or mentors. Note that you can still teach these courses online. Many of the hardware lab programs can also be simulated online. Project Courses - These courses often require a specific combination of hardware that the students will build for example a Simon or Pong game. Each of the hardware courses are designed to use low-cost Arduino hardware. We use low-cost Arduino Nanos for many labs since they can be purchased for around $2.50USD. Pre-course setup The online courses don't require any physical setup. However, you should have the parents create an account on TinkerCad and learn how to save and run sample programs. See the Introduction section for each course for details. Arduino Uno vs Nano We use both the Uno and the Nano in our classrooms. The main difference between these two is the size. Because Arduino Uno size is double to nano board. So Uno boards use more space on the system. The programming of UNO can be done with a USB cable whereas Nano uses the mini USB cable. We also use Nanos for our projects since they can easily fit on a breadboard and we can get them in bulk for around $3 from China. This is called a DIP-30 package (Dual Inline Package with 30 pins). Tinkercad This is just the basics of creating Arduino circuits using the Tinkercad web-based Arduino simulator. We start out with the Blink lab and then go on to use many LEDs, add sensors and other projects that demonstrate various Arduino programming concepts. Tinkercad LED Strips This course is ideal for students to learn how to program the low-cost LED strips. Once the students master the online labs they can purchase their own kits or participate in our popular costume contests or create \"art bikes\" that glow with patterns at night. Iinkercad LED Strips Course .","title":"CoderDojo Twin Cities Arduino Resources"},{"location":"#coderdojo-twin-cities-arduino-resources","text":"Welcome! This web site is for students and mentors that are participating in the Twin Cities CoderDojo sessions using the Arduino. Please let one of the mentors know if you have feedback that you think will help others.","title":"CoderDojo Twin Cities Arduino Resources"},{"location":"#course-types","text":"There are three types of courses in the CoderDojo Twin Cities Arudino: Online Courses - These courses are taught in virtual environments and don't require any hardware for our students. We use web sites like TinkerCad to simulate the behavior of Arduino devices. Hardware Courses - These courses require you to have general Arduino hardware and sensors used by the students or mentors. Note that you can still teach these courses online. Many of the hardware lab programs can also be simulated online. Project Courses - These courses often require a specific combination of hardware that the students will build for example a Simon or Pong game. Each of the hardware courses are designed to use low-cost Arduino hardware. We use low-cost Arduino Nanos for many labs since they can be purchased for around $2.50USD.","title":"Course Types"},{"location":"#pre-course-setup","text":"The online courses don't require any physical setup. However, you should have the parents create an account on TinkerCad and learn how to save and run sample programs. See the Introduction section for each course for details.","title":"Pre-course setup"},{"location":"#arduino-uno-vs-nano","text":"We use both the Uno and the Nano in our classrooms. The main difference between these two is the size. Because Arduino Uno size is double to nano board. So Uno boards use more space on the system. The programming of UNO can be done with a USB cable whereas Nano uses the mini USB cable. We also use Nanos for our projects since they can easily fit on a breadboard and we can get them in bulk for around $3 from China. This is called a DIP-30 package (Dual Inline Package with 30 pins).","title":"Arduino Uno vs Nano"},{"location":"#tinkercad","text":"This is just the basics of creating Arduino circuits using the Tinkercad web-based Arduino simulator. We start out with the Blink lab and then go on to use many LEDs, add sensors and other projects that demonstrate various Arduino programming concepts.","title":"Tinkercad"},{"location":"#tinkercad-led-strips","text":"This course is ideal for students to learn how to program the low-cost LED strips. Once the students master the online labs they can purchase their own kits or participate in our popular costume contests or create \"art bikes\" that glow with patterns at night. Iinkercad LED Strips Course .","title":"Tinkercad LED Strips"},{"location":"classroom-setup/","text":"CoderDojo Twin Cities Arduino Classroom Setup If you are going to attend one of our in-classroom classes, please note the following. Use our existing computers The computers in our labs have the Arduino IDE installed and there are Sparkfun Inventor Kits available. You just need to plug the Arduino Uno into the USB port using the cables in the boxes. This is the preferred method for most students. Bringing Your Own Computer to our Labs We encourage parents students to bring their own computer if they are working on longer-term Arduino projects at home. In order for you to get the most out of the class we encourage you to try the following three steps BEFORE you arrive. Step 1: Download the Arduino IDE Please try to pre-load the Arduino Integrated Development Environment (IDE) . This free software will run on Windows, Mac and Linux systems. If you are familiar with Eclipse, this is a version of Eclipse that has been extensively customized for the Arduino. The IDE comes pre-loaded with many sample programs. If you have questions about how to use the application please see the Arduino web site. There are also many YouTube videos that show you how the Arduino system work. Step 2: Download the SparkFun Inventors Kit Example Code We also would like you to pre-load the SparkFun Inventors Kit Code Examples so the student doesn't need to type in the code. Download the latest SIK Guide Code (http://sparkfun.com/sikcode) Unzip the above file Place the \"SIK Guide Code\" folder in the Arduino IDE \"examples\" directory: For PC: drag the \"SIK Guide Code\" folder into C:\\program files\\Arduino-x\\examples For MAC: drag the \"SIK Guide Code\" folder into Arduino-x/Contents/Resource/Java/examples For Linux: see http://www.arduino.cc/playground/Learning/Linux Start the Arduino IDE; the examples should be visible in File/Examples/SIK Guide Code","title":"CoderDojo Twin Cities Arduino Classroom Setup"},{"location":"classroom-setup/#coderdojo-twin-cities-arduino-classroom-setup","text":"If you are going to attend one of our in-classroom classes, please note the following.","title":"CoderDojo Twin Cities Arduino Classroom Setup"},{"location":"classroom-setup/#use-our-existing-computers","text":"The computers in our labs have the Arduino IDE installed and there are Sparkfun Inventor Kits available. You just need to plug the Arduino Uno into the USB port using the cables in the boxes. This is the preferred method for most students.","title":"Use our existing computers"},{"location":"classroom-setup/#bringing-your-own-computer-to-our-labs","text":"We encourage parents students to bring their own computer if they are working on longer-term Arduino projects at home. In order for you to get the most out of the class we encourage you to try the following three steps BEFORE you arrive.","title":"Bringing Your Own Computer to our Labs"},{"location":"classroom-setup/#step-1-download-the-arduino-ide","text":"Please try to pre-load the Arduino Integrated Development Environment (IDE) . This free software will run on Windows, Mac and Linux systems. If you are familiar with Eclipse, this is a version of Eclipse that has been extensively customized for the Arduino. The IDE comes pre-loaded with many sample programs. If you have questions about how to use the application please see the Arduino web site. There are also many YouTube videos that show you how the Arduino system work.","title":"Step 1: Download the Arduino IDE"},{"location":"classroom-setup/#step-2-download-the-sparkfun-inventors-kit-example-code","text":"We also would like you to pre-load the SparkFun Inventors Kit Code Examples so the student doesn't need to type in the code. Download the latest SIK Guide Code (http://sparkfun.com/sikcode) Unzip the above file Place the \"SIK Guide Code\" folder in the Arduino IDE \"examples\" directory: For PC: drag the \"SIK Guide Code\" folder into C:\\program files\\Arduino-x\\examples For MAC: drag the \"SIK Guide Code\" folder into Arduino-x/Contents/Resource/Java/examples For Linux: see http://www.arduino.cc/playground/Learning/Linux Start the Arduino IDE; the examples should be visible in File/Examples/SIK Guide Code","title":"Step 2: Download the SparkFun Inventors Kit Example Code"},{"location":"contact/","text":"Arduino Resources Contact For questions on this repository please contact: Dan.McCreary at gmail.com","title":"Contact"},{"location":"contact/#arduino-resources-contact","text":"For questions on this repository please contact: Dan.McCreary at gmail.com","title":"Arduino Resources Contact"},{"location":"contribute/","text":"Contributing CoderDojo Twin Cities Arduino Resources We are an all-volunteer group of mentors, teachers and programmers that love the help children learn about the wonders of computer science. We think that Arduino programming is one of the best ways to keep our students engaged in STEM programs. But we can't do this without your help! We need a variety of people with many different skills and interests. If you are not a programmer, that is OK. We still have many tasks you can help us with. Here are just a few items we need help with: Organizing special events Are you good at organizing? We need you! For example every year we teach girls how to use Arduino to create colorful Arduino costumes. Reviewing Content Got a knack for grammar? We can always use help editing our growing library of Arduino materials. Course Design Are you good at designing courses for students? We have many groups that would like to repackage our Arduino materials for specific groups such as girls in scouts, local programming clubs, environmental organizations, or schools that have specific curriculum needs. Usability testing Would you like to pretend you are a student? Just try to go through our labs and see what you like or don't like. The tell us what we can improve. Mentoring Students Every year CoderDojo is flooded with students that would like to learn coding. We never have enough mentors. Even if you don't have strong computer programming skills we think you can be a great mentor for our students. Volunteer Now! Click here to sign up as a volunteer or mentor: https://coderdojotc.org/mentor_signup/ For questions just send email to hello [at] coderdojotc dot org","title":"Contributing"},{"location":"contribute/#contributing-coderdojo-twin-cities-arduino-resources","text":"We are an all-volunteer group of mentors, teachers and programmers that love the help children learn about the wonders of computer science. We think that Arduino programming is one of the best ways to keep our students engaged in STEM programs. But we can't do this without your help! We need a variety of people with many different skills and interests. If you are not a programmer, that is OK. We still have many tasks you can help us with. Here are just a few items we need help with: Organizing special events Are you good at organizing? We need you! For example every year we teach girls how to use Arduino to create colorful Arduino costumes. Reviewing Content Got a knack for grammar? We can always use help editing our growing library of Arduino materials. Course Design Are you good at designing courses for students? We have many groups that would like to repackage our Arduino materials for specific groups such as girls in scouts, local programming clubs, environmental organizations, or schools that have specific curriculum needs. Usability testing Would you like to pretend you are a student? Just try to go through our labs and see what you like or don't like. The tell us what we can improve. Mentoring Students Every year CoderDojo is flooded with students that would like to learn coding. We never have enough mentors. Even if you don't have strong computer programming skills we think you can be a great mentor for our students.","title":"Contributing CoderDojo Twin Cities Arduino Resources"},{"location":"contribute/#volunteer-now","text":"Click here to sign up as a volunteer or mentor: https://coderdojotc.org/mentor_signup/ For questions just send email to hello [at] coderdojotc dot org","title":"Volunteer Now!"},{"location":"costume-kit-parts/","text":"Costume Kit Purchasing Guide The following parts lists are designed for our annual Halloween Costume Project. We have been doing these classes since 2014 in conjunction with the IoT Hackday project. We think it is a great way to get kids interested in programming. Special thanks to Justin Grammens for all his help organizing these events. In addition to these kits, you will need a PC or laptop with a USB port that you can install the Arduino IDE and Arduino device drivers. If you don't have admin rights to your computer you can't use it for this project. These kits assume that you have a soldering iron and solder. But you don't have to do a lot of soldering! The LED strips only have three wires that need to be connected. If you use a breadboard you can get by with minimal soldering. It helps to have some 24-gauge solid-core wire to solder wires that can easily slide into the breadboards. For elaborate costumes that have LEDs on different parts of the costume we suggest black 26-gauge stranded wire. The stranded wire is more flexible and will not break after being bent repeatedly. See below for sample links. If you are a cost-conscious buyer, we strongly suggest you start to order your parts around mid-September. This allows the lower cost parts to be ordered from China. They take 2-3 weeks to arrive and if you don't get them by the first week of October you can still reorder some missing parts. Ordering Low-Cost Hardware From eBay/China In Time If you are a good planner and willing to do some work you can get very low-cost parts from China at a fraction of the prices you see on Amazon or in various kits. Just remember that the parts should be ordered 2-3 weeks before your courses start. For the Hardware Courses here are the typical components you will use: Part Name Description Price Link Note Arduino Nano Arduino Nano ATmega328 CH340G Mini USB. The main processor in a low-cost and breadboard-friendly package. Some version require you to solder in your own header pins and some are \"pre-welded\" meaning the headers are soldered in. $2.50 each ebay - solder your own Note this version will require you to solder on the headers. Mini USB Cable Short Mini USB cable for connecting the Arduino to the PC's USB port $1.00 ebay check you computer to see what type of cable you need 400 Tie Solderless Breadboard This 1/2 size breadboard has 400 ties and is big enough for most beginning projects. It is also small enough for students to carry in a backpack $1.50 each ebay The Nano fits directly into this breadboard LED Strip 1 meter of 60 pixels using the WS2812B standards $8.00 eBay eBay I like the ip65 waterproof in silicon coating with the black background Breadboard Jumper Wires 65 Male-to-Male jumpers of various lengths $2.50 for 65 ebay Reuse for many projects Battery Pack 3 AAA 4.5V Battery Pack with Switch $1.90 ebay The Amazon Option (Fast but more expensive) Here are some links from Amazon: Part Price Link Arduino Nano $9 FTCBlock Mini Nano V3.0 ATmega328P Microcontroller Board with USB Cable for Arduino (1pcs Board+1pcs Cable) LED Strip $11 BTF-LIGHTING WS2812B RGB 5050SMD Individual Addressable 3.3FT 60(2x30) Pixels/m Flexible Black PCB Full Color LED Pixel Strip Dream Color IP30 Non-Waterproof Making LED Screen, LED Wall Only DC5V 400 Tie Breadboard $6 BB400 Solderless Plug-in BreadBoard, 400 tie-Points, 4 Power Rails, with Metal Backing Plate, 3.3 x 2.2 x 0.3in (84 x 55 x 9mm) Long Lasting Rechargeable Lithium Battery Packs For those of you that don't want to have to run out to the store and purchase AAA or AA batteries each time the kids run out of power, one option is to invest in one of these incredible 5V Lithium rechargeable battery packs. They will last about 10x longer than 3 AAA batteries and you can recharge them on any USB port of a laptop or a wall wart. My top pick is the PURSUN battery pack for $13.99 that has a built-in percentage power remaining indicator: PURSUN 10,000 mAh USB power pack with display $11.99 The lowest cost option is the Aibocn brand: Aibocn Mini Power Bank 6700mAh $8.99 For a little more power Yobon has a nice option: YOBON 12,000 mAh USB power pack with percent display $13.99 The Anker brand also has a great reputation for high quality: Anker PowerCore 10000 Portable Charger $19 These chargers can double the cost of the kits, but they really are nice and they can also charge your cell phone! Buttons and Potentiometers Some students like to modify their costumes with switches that change the pattern or change the speed or brightness. Here are parts you can use for these: Push Button: Tactile Push Button Switch Momentary Tact & Cap 12x12x7.3mm Assorted Kit Arduino USD $8.99 10K Ohm Linear Potentiometer Neopixel Rings Some of our students love the Neopixel rings. They come in several sizes but they often require some fine soldering work. 1, 8, 12, 16, 24 Neopixel Ring Set $20.00 USD Extra Wire For costumes that have LED sewn through the costume you will need extra flexible stranded wire. We like the 28 gauge stranded wire for this. 28 AWG Flexible Stranded Wire on eBay LED Strings You can also purchase individual pixels and LED Strings that are spaced three inches apart with wires connecting them. LED Strings Low cost LED String $7 option","title":"Costume Kit Parts List"},{"location":"costume-kit-parts/#costume-kit-purchasing-guide","text":"The following parts lists are designed for our annual Halloween Costume Project. We have been doing these classes since 2014 in conjunction with the IoT Hackday project. We think it is a great way to get kids interested in programming. Special thanks to Justin Grammens for all his help organizing these events. In addition to these kits, you will need a PC or laptop with a USB port that you can install the Arduino IDE and Arduino device drivers. If you don't have admin rights to your computer you can't use it for this project. These kits assume that you have a soldering iron and solder. But you don't have to do a lot of soldering! The LED strips only have three wires that need to be connected. If you use a breadboard you can get by with minimal soldering. It helps to have some 24-gauge solid-core wire to solder wires that can easily slide into the breadboards. For elaborate costumes that have LEDs on different parts of the costume we suggest black 26-gauge stranded wire. The stranded wire is more flexible and will not break after being bent repeatedly. See below for sample links. If you are a cost-conscious buyer, we strongly suggest you start to order your parts around mid-September. This allows the lower cost parts to be ordered from China. They take 2-3 weeks to arrive and if you don't get them by the first week of October you can still reorder some missing parts.","title":"Costume Kit Purchasing Guide"},{"location":"costume-kit-parts/#ordering-low-cost-hardware-from-ebaychina-in-time","text":"If you are a good planner and willing to do some work you can get very low-cost parts from China at a fraction of the prices you see on Amazon or in various kits. Just remember that the parts should be ordered 2-3 weeks before your courses start. For the Hardware Courses here are the typical components you will use: Part Name Description Price Link Note Arduino Nano Arduino Nano ATmega328 CH340G Mini USB. The main processor in a low-cost and breadboard-friendly package. Some version require you to solder in your own header pins and some are \"pre-welded\" meaning the headers are soldered in. $2.50 each ebay - solder your own Note this version will require you to solder on the headers. Mini USB Cable Short Mini USB cable for connecting the Arduino to the PC's USB port $1.00 ebay check you computer to see what type of cable you need 400 Tie Solderless Breadboard This 1/2 size breadboard has 400 ties and is big enough for most beginning projects. It is also small enough for students to carry in a backpack $1.50 each ebay The Nano fits directly into this breadboard LED Strip 1 meter of 60 pixels using the WS2812B standards $8.00 eBay eBay I like the ip65 waterproof in silicon coating with the black background Breadboard Jumper Wires 65 Male-to-Male jumpers of various lengths $2.50 for 65 ebay Reuse for many projects Battery Pack 3 AAA 4.5V Battery Pack with Switch $1.90 ebay","title":"Ordering Low-Cost Hardware From eBay/China In Time"},{"location":"costume-kit-parts/#the-amazon-option-fast-but-more-expensive","text":"Here are some links from Amazon: Part Price Link Arduino Nano $9 FTCBlock Mini Nano V3.0 ATmega328P Microcontroller Board with USB Cable for Arduino (1pcs Board+1pcs Cable) LED Strip $11 BTF-LIGHTING WS2812B RGB 5050SMD Individual Addressable 3.3FT 60(2x30) Pixels/m Flexible Black PCB Full Color LED Pixel Strip Dream Color IP30 Non-Waterproof Making LED Screen, LED Wall Only DC5V 400 Tie Breadboard $6 BB400 Solderless Plug-in BreadBoard, 400 tie-Points, 4 Power Rails, with Metal Backing Plate, 3.3 x 2.2 x 0.3in (84 x 55 x 9mm)","title":"The Amazon Option (Fast but more expensive)"},{"location":"costume-kit-parts/#long-lasting-rechargeable-lithium-battery-packs","text":"For those of you that don't want to have to run out to the store and purchase AAA or AA batteries each time the kids run out of power, one option is to invest in one of these incredible 5V Lithium rechargeable battery packs. They will last about 10x longer than 3 AAA batteries and you can recharge them on any USB port of a laptop or a wall wart. My top pick is the PURSUN battery pack for $13.99 that has a built-in percentage power remaining indicator: PURSUN 10,000 mAh USB power pack with display $11.99 The lowest cost option is the Aibocn brand: Aibocn Mini Power Bank 6700mAh $8.99 For a little more power Yobon has a nice option: YOBON 12,000 mAh USB power pack with percent display $13.99 The Anker brand also has a great reputation for high quality: Anker PowerCore 10000 Portable Charger $19 These chargers can double the cost of the kits, but they really are nice and they can also charge your cell phone!","title":"Long Lasting Rechargeable Lithium Battery Packs"},{"location":"costume-kit-parts/#buttons-and-potentiometers","text":"Some students like to modify their costumes with switches that change the pattern or change the speed or brightness. Here are parts you can use for these: Push Button: Tactile Push Button Switch Momentary Tact & Cap 12x12x7.3mm Assorted Kit Arduino USD $8.99 10K Ohm Linear Potentiometer","title":"Buttons and Potentiometers"},{"location":"costume-kit-parts/#neopixel-rings","text":"Some of our students love the Neopixel rings. They come in several sizes but they often require some fine soldering work. 1, 8, 12, 16, 24 Neopixel Ring Set $20.00 USD","title":"Neopixel Rings"},{"location":"costume-kit-parts/#extra-wire","text":"For costumes that have LED sewn through the costume you will need extra flexible stranded wire. We like the 28 gauge stranded wire for this. 28 AWG Flexible Stranded Wire on eBay","title":"Extra Wire"},{"location":"costume-kit-parts/#led-strings","text":"You can also purchase individual pixels and LED Strings that are spaced three inches apart with wires connecting them. LED Strings Low cost LED String $7 option","title":"LED Strings"},{"location":"glossary/","text":"Arduino Glossary of Terms Anode The positive side of our LEDs. Make sure you put a 330-ohm current limiting resistor between the LED and the digital output or a 5-volt connection. Arduino Arduino is the name of a popular open electronic learning platform for teaching Physical Computing based around a set of open standards. Devices cost as little as $2.50 US. There are over 2 million YouTube videos on Arduino projects. An Arduino is programmed using a PC and a USB cable. Once an Arduino program is uploaded into a device it can be disconnected. Cathode The negative side of our LEDs. Make sure that the cathode always goes to the ground (GND) pin or rail. It is a best practice to use a black wire to connect the cathode to ground. Concept Cards Small laminated cards that describe a specific concept. They are often spread out on a table near the entrance to CoderDojo events. Each card has 1. a concept name 2. a concept difficulty level (Beginning, Intermediate or Advanced) 3. an image to promote recall 4. a challenge text on the front of the card 5. answers to the challenge on the back of the card See Designing Concept Cards Integrated Development Environment An integrated development environment is a software program used for writing, checking, debugging and downloading software into the Arduino. Some IDEs also have data visualization tools for plotting the output of sensors. See also: IDE Pulse Wave Modulation A way of controlling the speed of a motor or the intensity of a light by changing the amount of time a signal is on. On the Arduino only a subset of output pins can be used to send PWM signals. On the Arduino Nano these are pins 3,5,6,9, 10 and 11. See also: PWM Arduino Nano The original Arduino devices have a defect in that they are not compatible with standardized solderless breadboards. We use a lower-cost version that can plug in directly to a solderless breadboard. * Hardware Web Page * Guide to the Arduino Nano CH340 Drivers The name of the low-cost USB interface chip that is use instead of the more expensive FTDI USB interface chip. Although the chip is low-cost, the driver is not usually included with the Arduino IDE and the driver may not digitally sigined for the Mac. SparkFun guide to installing the CH340 drivers See the CH340 drivers here See Arduino Nano CH340 Instructable for a good description of how to make the CH340 work on the Mac. H-Bridge A device that takes in pulse width modulation signals from an Arduino controller and controls the forward and reverse speed of a motor. We use the L293D chip in many of our motor control labs. l293D motor driver A device for controlling two motors with an Arduino. We use this device in many of our labs and to drive our robots. A low-cost breakout of this chip with headers costs about $1.50 on ebay. Mini Motor Drive Shield Expansion Board L293D Module For Arduino UNO MEGA2560 R3 Light Emitting Diode A solid-state device that emits light when a voltage is applied. LEDs come in various colors such as red, green and blue. In our labs we will use various colors of LEDs that all use around 20 milliamps of current. To make sure that there is not too much current going through the LED we always use a 330-ohm resistor in series with the LEDs. Also known as: LED Wikipedia Definition Moving Rainbow Kits These are kits that combine three important aspects of learning: Color, Motion and Social Constructionism. Students are interested in sensing and changing the world around them. The use of low-cost LEDs and DC-motors can make these kits not only fun, but inexpensive enough that students can purchase them and take them home to share with friends. A typical cost is around $15.00 USD. Web site: https://dmccreary.gitbooks.io/moving-rainbow/ Red-Green-Blue LED A single device that has three colors of LEDs. One for red, one for blue and one for green. We use common cathode LEDs in CoderDojo labs. By combining various intensities of each of these three colors we can create many additional colors. Also known as: RGB LED NeoPixel This is the name coined by Adafruit for an individually addressable LED. Adafruit also provides a high-quality open source library on github to drive these LEDs. NeoPixel on Adafruit Web Site Also known as: [#ws2812B] NeoPixel Library The Arduino library used in these guides to program our LED strips. We picked this library because of its popularity and the many on-line tutorials about how to use them. [NeoPixel Library Guide on the Adafruit Web Site]https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library NeoPixel Library on GitHub Physical Computing Hardware and software that can sense and respond to changes in the world around us. * Wikipedia Definition Photoresistor A small electrical component that changes its resistance based on the amount of light that is present. We use this device in our introductory Aruduino labs. Servo Motor A small electrical motor that we control the angular positions by sending digital pulses from the Arduino. Social Constructionism Getting students to build things together in teams. This style of teaching has many benefits over standard lecture-style learning. Social constructionism is one of the core techniques taught in CoderDojo. * Wikipedia Definition * Berkeley Web Site on Social Constructionism in Education WS2812B A standard for addressable RGB LEDs * Data sheet from Adafruit","title":"Glossary"},{"location":"glossary/#arduino-glossary-of-terms","text":"","title":"Arduino Glossary of Terms"},{"location":"glossary/#anode","text":"The positive side of our LEDs. Make sure you put a 330-ohm current limiting resistor between the LED and the digital output or a 5-volt connection.","title":"Anode"},{"location":"glossary/#arduino","text":"Arduino is the name of a popular open electronic learning platform for teaching Physical Computing based around a set of open standards. Devices cost as little as $2.50 US. There are over 2 million YouTube videos on Arduino projects. An Arduino is programmed using a PC and a USB cable. Once an Arduino program is uploaded into a device it can be disconnected.","title":"Arduino"},{"location":"glossary/#cathode","text":"The negative side of our LEDs. Make sure that the cathode always goes to the ground (GND) pin or rail. It is a best practice to use a black wire to connect the cathode to ground.","title":"Cathode"},{"location":"glossary/#concept-cards","text":"Small laminated cards that describe a specific concept. They are often spread out on a table near the entrance to CoderDojo events. Each card has 1. a concept name 2. a concept difficulty level (Beginning, Intermediate or Advanced) 3. an image to promote recall 4. a challenge text on the front of the card 5. answers to the challenge on the back of the card See Designing Concept Cards","title":"Concept Cards"},{"location":"glossary/#integrated-development-environment","text":"An integrated development environment is a software program used for writing, checking, debugging and downloading software into the Arduino. Some IDEs also have data visualization tools for plotting the output of sensors. See also: IDE","title":"Integrated Development Environment"},{"location":"glossary/#pulse-wave-modulation","text":"A way of controlling the speed of a motor or the intensity of a light by changing the amount of time a signal is on. On the Arduino only a subset of output pins can be used to send PWM signals. On the Arduino Nano these are pins 3,5,6,9, 10 and 11. See also: PWM","title":"Pulse Wave Modulation"},{"location":"glossary/#arduino-nano","text":"The original Arduino devices have a defect in that they are not compatible with standardized solderless breadboards. We use a lower-cost version that can plug in directly to a solderless breadboard. * Hardware Web Page * Guide to the Arduino Nano","title":"Arduino Nano"},{"location":"glossary/#ch340-drivers","text":"The name of the low-cost USB interface chip that is use instead of the more expensive FTDI USB interface chip. Although the chip is low-cost, the driver is not usually included with the Arduino IDE and the driver may not digitally sigined for the Mac. SparkFun guide to installing the CH340 drivers See the CH340 drivers here See Arduino Nano CH340 Instructable for a good description of how to make the CH340 work on the Mac.","title":"CH340 Drivers"},{"location":"glossary/#h-bridge","text":"A device that takes in pulse width modulation signals from an Arduino controller and controls the forward and reverse speed of a motor. We use the L293D chip in many of our motor control labs.","title":"H-Bridge"},{"location":"glossary/#l293d-motor-driver","text":"A device for controlling two motors with an Arduino. We use this device in many of our labs and to drive our robots. A low-cost breakout of this chip with headers costs about $1.50 on ebay. Mini Motor Drive Shield Expansion Board L293D Module For Arduino UNO MEGA2560 R3","title":"l293D motor driver"},{"location":"glossary/#light-emitting-diode","text":"A solid-state device that emits light when a voltage is applied. LEDs come in various colors such as red, green and blue. In our labs we will use various colors of LEDs that all use around 20 milliamps of current. To make sure that there is not too much current going through the LED we always use a 330-ohm resistor in series with the LEDs. Also known as: LED Wikipedia Definition","title":"Light Emitting Diode"},{"location":"glossary/#moving-rainbow-kits","text":"These are kits that combine three important aspects of learning: Color, Motion and Social Constructionism. Students are interested in sensing and changing the world around them. The use of low-cost LEDs and DC-motors can make these kits not only fun, but inexpensive enough that students can purchase them and take them home to share with friends. A typical cost is around $15.00 USD. Web site: https://dmccreary.gitbooks.io/moving-rainbow/","title":"Moving Rainbow Kits"},{"location":"glossary/#red-green-blue-led","text":"A single device that has three colors of LEDs. One for red, one for blue and one for green. We use common cathode LEDs in CoderDojo labs. By combining various intensities of each of these three colors we can create many additional colors. Also known as: RGB LED","title":"Red-Green-Blue LED"},{"location":"glossary/#neopixel","text":"This is the name coined by Adafruit for an individually addressable LED. Adafruit also provides a high-quality open source library on github to drive these LEDs. NeoPixel on Adafruit Web Site Also known as: [#ws2812B]","title":"NeoPixel"},{"location":"glossary/#neopixel-library","text":"The Arduino library used in these guides to program our LED strips. We picked this library because of its popularity and the many on-line tutorials about how to use them. [NeoPixel Library Guide on the Adafruit Web Site]https://learn.adafruit.com/adafruit-neopixel-uberguide/arduino-library NeoPixel Library on GitHub","title":"NeoPixel Library"},{"location":"glossary/#physical-computing","text":"Hardware and software that can sense and respond to changes in the world around us. * Wikipedia Definition","title":"Physical Computing"},{"location":"glossary/#photoresistor","text":"A small electrical component that changes its resistance based on the amount of light that is present. We use this device in our introductory Aruduino labs.","title":"Photoresistor"},{"location":"glossary/#servo-motor","text":"A small electrical motor that we control the angular positions by sending digital pulses from the Arduino.","title":"Servo Motor"},{"location":"glossary/#social-constructionism","text":"Getting students to build things together in teams. This style of teaching has many benefits over standard lecture-style learning. Social constructionism is one of the core techniques taught in CoderDojo. * Wikipedia Definition * Berkeley Web Site on Social Constructionism in Education","title":"Social Constructionism"},{"location":"glossary/#ws2812b","text":"A standard for addressable RGB LEDs * Data sheet from Adafruit","title":"WS2812B"},{"location":"index-orig/","text":"Arduino Resources This GitHub repository contains resources for teaching Arduino in various settings including hands-on and virtual classes. This repository includes curriculum, lesson plans, labs, sample programs and teaching resources such as slides and glossaries. Tinkercad This is just the basics of creating Arduino circuits using the Tinkercad web-based Arduino simulator. We start out with the Blink lab and then go on to use many LEDs, add sensors and other projects that demonstrate various Arduino programming concepts. Tinkercad LED Strips This course is ideal for students to learn how to program the low-cost LED strips. Once the students master the online labs they can purchase their own kits or participate in our popular costume contests or create \"art bikes\" that glow with patterns at night. Iinkercad LED Strips Course . Arduino Classic Projects These labs use standard Arduino Nano hardware to keep the costs of our projects low. You can also use the Arduino Uno for these courses, however the packaging will need to be modified for many of the projects. Our focus is a wide variety of low-cost Arduino projects (usually under $15) that students can make, throw in their backpacks, take to school and show their friends why coding rocks! Arduino Displays This course has a narrow focus using displays with the Arduino. We have many labs that use low-cost OLED displays to create fun low-cost games that students can easily put in a backpack and take to school. The pong game is a favorite with our students.","title":"Arduino Resources"},{"location":"index-orig/#arduino-resources","text":"This GitHub repository contains resources for teaching Arduino in various settings including hands-on and virtual classes. This repository includes curriculum, lesson plans, labs, sample programs and teaching resources such as slides and glossaries.","title":"Arduino Resources"},{"location":"index-orig/#tinkercad","text":"This is just the basics of creating Arduino circuits using the Tinkercad web-based Arduino simulator. We start out with the Blink lab and then go on to use many LEDs, add sensors and other projects that demonstrate various Arduino programming concepts.","title":"Tinkercad"},{"location":"index-orig/#tinkercad-led-strips","text":"This course is ideal for students to learn how to program the low-cost LED strips. Once the students master the online labs they can purchase their own kits or participate in our popular costume contests or create \"art bikes\" that glow with patterns at night. Iinkercad LED Strips Course .","title":"Tinkercad LED Strips"},{"location":"index-orig/#arduino-classic-projects","text":"These labs use standard Arduino Nano hardware to keep the costs of our projects low. You can also use the Arduino Uno for these courses, however the packaging will need to be modified for many of the projects. Our focus is a wide variety of low-cost Arduino projects (usually under $15) that students can make, throw in their backpacks, take to school and show their friends why coding rocks!","title":"Arduino Classic Projects"},{"location":"index-orig/#arduino-displays","text":"This course has a narrow focus using displays with the Arduino. We have many labs that use low-cost OLED displays to create fun low-cost games that students can easily put in a backpack and take to school. The pong game is a favorite with our students.","title":"Arduino Displays"},{"location":"instructors-guide/","text":"Instructor's Guide Sample Slide Presentations Arduino and Robots In the Classroom This is a slide deck of over 100 slides in Google Slides format that you can use in your classrooms. It has many of the figures and diagrams we have used in our CoderDojo curriculum. Like all our materails, you can use this for non-profit educational institutions without fees. Our License Agreement Creative Commons Licensed - Attribution - Non-Commercial - ShareAlike 4.0 As a noncommercial organization, you are free to use and remix this content Attribution is always appreciated Use is limited for non-commercial purposes","title":"Instructors Guide"},{"location":"instructors-guide/#instructors-guide","text":"","title":"Instructor's Guide"},{"location":"instructors-guide/#sample-slide-presentations","text":"Arduino and Robots In the Classroom This is a slide deck of over 100 slides in Google Slides format that you can use in your classrooms. It has many of the figures and diagrams we have used in our CoderDojo curriculum. Like all our materails, you can use this for non-profit educational institutions without fees.","title":"Sample Slide Presentations"},{"location":"instructors-guide/#our-license-agreement","text":"Creative Commons Licensed - Attribution - Non-Commercial - ShareAlike 4.0 As a noncommercial organization, you are free to use and remix this content Attribution is always appreciated Use is limited for non-commercial purposes","title":"Our License Agreement"},{"location":"purchasing-guide/","text":"CoderDojo Twin Cities Arduino Parts Purchasing Guide The \"Take Me Home\" Advantage When we first started teaching Arduino in our courses we stuck with a tried-and-true Arduino kit from a trusted vendor. We purchased ten SparkFun Inventors Kids (SIK) for around $110 each. These kits served us well for about a year and then we found our needs growing. We wanted students to be able to do complete projects and then be able to take their kits home and show their students and friends. Most of our students could not afford to spend over $100 on an electronics kit. Their parents were not sure they would use the kits more than once or twice. Our solution was to source low-cost Arduino kits that students could afford to purchase and keep. Our target prices was $25 US. We are happy to report that we now have fun kits as low as $15 that students have used to learn many computer science concepts. Getting Low-Cost Hardware In Time For Classes If you are a good planner and willing to do some work you can get very low-cost parts from China at a fraction of the prices you see in kits. Just remember that the parts should be ordered 2-3 weeks before your courses start. For the Hardware Courses here are the typical components you will use: Part Name Description Price Link Note Arduino Nano Arduino Nano ATmega328 CH340G Mini USB. The main processor in a low-cost and breadboard-friendly package. Some version require you to solder in your own header pins and some are \"pre-welded\" meaning the headers are soldered in. $2.50 each ebay - solder your own Note this version will require you to solder on the headers. Mini USB Cable Short Mini USB cable for connecting the Arduino to the PC's USB port $1.00 ebay check you computer to see what type of cable you need 400 Tie Solderless Breadboard This 1/2 size breadboard has 400 ties and is big enough for most beginning projects. It is also small enough for students to carry in a backpack $1.50 each ebay The Nano fits directly into this breadboard LEDs 100 LEDs of various colors (Red, Green, Blue, Yellow, White). At $1 for 100 LEDs you can stop worrying about burning a few out $1 for 100 ebay 330 Ohm Resistors This package of 100 should be enough for most classrooms $1.25 for 100 ebay 330 ohms are perfect for connecting an LED to a 5-volt source Breadboard Jumper Wires 65 Male-to-Male jumpers of various lengths $2.50 for 65 ebay Reuse for many projects Ping Sensor HC-SR04 Ultrasonic distance sensor. There are many sensors priced much higher but this will work fine for our projects $1.50 each ebay Sample Starter Kits A Cautionary Tail Before we suggest kits we want to caution parents that spend a lot of money to purchase a fancy electronic kit that gets used once and then gets stuffed in the back of a closet. We have had many parents come to us and tell us stories of how frustrating it is to not be able to get circuits to work. Just one wire misconnected or one line of code wrong and students can quickly become frustrated. The solution is to always start slowly and use a mentor to guide your students over the frustrating parts of building circuits. This is especially true for the first six weeks of learning Arduino. After three or four mentoring session students will start to learn debugging techniques so they can solve their own problems. Basic Starter Kit We understand that not every school wants to purchase individual components that may 2-3 weeks to arrive from China. If you need a kit quickly and are willing to compromise on component choice and cost here are some options that usually ship from Amazon in under a week. ELEGOO Basic Starter Kit If you are not sure your students are interested in programming we suggest you start simple. Buy a low-cost kit and have your student work with a mentor for 2-3 months. After that time you will get a feel for if buying additional kits is a good educational investments. This kit from ELEGOO is inexpensive but lacks some of the basic sensores such as a ping sensor. ELEGOO UNO Project Basic Starter Kit with Tutorial and UNO R3 Compatible with Arduino IDE $17.99","title":"Purchasing Guide"},{"location":"purchasing-guide/#coderdojo-twin-cities-arduino-parts-purchasing-guide","text":"","title":"CoderDojo Twin Cities Arduino Parts Purchasing Guide"},{"location":"purchasing-guide/#the-take-me-home-advantage","text":"When we first started teaching Arduino in our courses we stuck with a tried-and-true Arduino kit from a trusted vendor. We purchased ten SparkFun Inventors Kids (SIK) for around $110 each. These kits served us well for about a year and then we found our needs growing. We wanted students to be able to do complete projects and then be able to take their kits home and show their students and friends. Most of our students could not afford to spend over $100 on an electronics kit. Their parents were not sure they would use the kits more than once or twice. Our solution was to source low-cost Arduino kits that students could afford to purchase and keep. Our target prices was $25 US. We are happy to report that we now have fun kits as low as $15 that students have used to learn many computer science concepts.","title":"The \"Take Me Home\" Advantage"},{"location":"purchasing-guide/#getting-low-cost-hardware-in-time-for-classes","text":"If you are a good planner and willing to do some work you can get very low-cost parts from China at a fraction of the prices you see in kits. Just remember that the parts should be ordered 2-3 weeks before your courses start. For the Hardware Courses here are the typical components you will use: Part Name Description Price Link Note Arduino Nano Arduino Nano ATmega328 CH340G Mini USB. The main processor in a low-cost and breadboard-friendly package. Some version require you to solder in your own header pins and some are \"pre-welded\" meaning the headers are soldered in. $2.50 each ebay - solder your own Note this version will require you to solder on the headers. Mini USB Cable Short Mini USB cable for connecting the Arduino to the PC's USB port $1.00 ebay check you computer to see what type of cable you need 400 Tie Solderless Breadboard This 1/2 size breadboard has 400 ties and is big enough for most beginning projects. It is also small enough for students to carry in a backpack $1.50 each ebay The Nano fits directly into this breadboard LEDs 100 LEDs of various colors (Red, Green, Blue, Yellow, White). At $1 for 100 LEDs you can stop worrying about burning a few out $1 for 100 ebay 330 Ohm Resistors This package of 100 should be enough for most classrooms $1.25 for 100 ebay 330 ohms are perfect for connecting an LED to a 5-volt source Breadboard Jumper Wires 65 Male-to-Male jumpers of various lengths $2.50 for 65 ebay Reuse for many projects Ping Sensor HC-SR04 Ultrasonic distance sensor. There are many sensors priced much higher but this will work fine for our projects $1.50 each ebay","title":"Getting Low-Cost Hardware In Time For Classes"},{"location":"purchasing-guide/#sample-starter-kits","text":"","title":"Sample Starter Kits"},{"location":"purchasing-guide/#a-cautionary-tail","text":"Before we suggest kits we want to caution parents that spend a lot of money to purchase a fancy electronic kit that gets used once and then gets stuffed in the back of a closet. We have had many parents come to us and tell us stories of how frustrating it is to not be able to get circuits to work. Just one wire misconnected or one line of code wrong and students can quickly become frustrated. The solution is to always start slowly and use a mentor to guide your students over the frustrating parts of building circuits. This is especially true for the first six weeks of learning Arduino. After three or four mentoring session students will start to learn debugging techniques so they can solve their own problems.","title":"A Cautionary Tail"},{"location":"purchasing-guide/#basic-starter-kit","text":"We understand that not every school wants to purchase individual components that may 2-3 weeks to arrive from China. If you need a kit quickly and are willing to compromise on component choice and cost here are some options that usually ship from Amazon in under a week.","title":"Basic Starter Kit"},{"location":"purchasing-guide/#elegoo-basic-starter-kit","text":"If you are not sure your students are interested in programming we suggest you start simple. Buy a low-cost kit and have your student work with a mentor for 2-3 months. After that time you will get a feel for if buying additional kits is a good educational investments. This kit from ELEGOO is inexpensive but lacks some of the basic sensores such as a ping sensor. ELEGOO UNO Project Basic Starter Kit with Tutorial and UNO R3 Compatible with Arduino IDE $17.99","title":"ELEGOO Basic Starter Kit"},{"location":"references/","text":"Arduino References Arduino Wikipedia Page Quizes Arduino Quiz at Quizizz.com Arduino Quiz at Quizizz.com Element 14 Quiz - requires registration RootSaid Robotics","title":"Arduino References"},{"location":"references/#arduino-references","text":"Arduino Wikipedia Page","title":"Arduino References"},{"location":"references/#quizes","text":"Arduino Quiz at Quizizz.com Arduino Quiz at Quizizz.com Element 14 Quiz - requires registration RootSaid Robotics","title":"Quizes"},{"location":"resources/","text":"Arduino Resources This GitHub repository contains resources for teaching Arduino in various settings including hands-on and virtual classes. This repository includes curriculum, lesson plans, labs, sample programs and teaching resources such as slides and glossaries. Tinkercad This is just the basics of creating Arduino circuits using the Tinkercad web-based Arduino simulator. We start out with the Blink lab and then go on to use many LEDs, add sensors and other projects that demonstrate various Arduino programming concepts. Tinkercad LED Strips This course is ideal for students to learn how to program the low-cost LED strips. Once the students master the online labs they can purchase their own kits or participate in our popular costume contests or create \"art bikes\" that glow with patterns at night. Iinkercad LED Strips Course . Arduino Classic Projects These labs use standard Arduino Nano hardware to keep the costs of our projects low. You can also use the Arduino Uno for these courses, however the packaging will need to be modified for many of the projects. Our focus is a wide variety of low-cost Arduino projects (usually under $15) that students can make, throw in their backpacks, take to school and show their friends why coding rocks! Arduino Displays This course has a narrow focus using displays with the Arduino. We have many labs that use low-cost OLED displays to create fun low-cost games that students can easily put in a backpack and take to school. The pong game is a favorite with our students. Moving Rainbow This site has many projects that use the low-cost Arduino Nano and LED strips. We are in the process of moving the content to support mkdocs on GitHub pages. The site also has teaching materials for your own events. Arduino Moving Rainbow . CoderDojo Robots This site has many projects base on the low-cost ($25) CoderDojo Arduino Robot Kit. $25 Robot Platform for Teaching Programming on Instructables CoderDojo Robots","title":"Resources"},{"location":"resources/#arduino-resources","text":"This GitHub repository contains resources for teaching Arduino in various settings including hands-on and virtual classes. This repository includes curriculum, lesson plans, labs, sample programs and teaching resources such as slides and glossaries.","title":"Arduino Resources"},{"location":"resources/#tinkercad","text":"This is just the basics of creating Arduino circuits using the Tinkercad web-based Arduino simulator. We start out with the Blink lab and then go on to use many LEDs, add sensors and other projects that demonstrate various Arduino programming concepts.","title":"Tinkercad"},{"location":"resources/#tinkercad-led-strips","text":"This course is ideal for students to learn how to program the low-cost LED strips. Once the students master the online labs they can purchase their own kits or participate in our popular costume contests or create \"art bikes\" that glow with patterns at night. Iinkercad LED Strips Course .","title":"Tinkercad LED Strips"},{"location":"resources/#arduino-classic-projects","text":"These labs use standard Arduino Nano hardware to keep the costs of our projects low. You can also use the Arduino Uno for these courses, however the packaging will need to be modified for many of the projects. Our focus is a wide variety of low-cost Arduino projects (usually under $15) that students can make, throw in their backpacks, take to school and show their friends why coding rocks!","title":"Arduino Classic Projects"},{"location":"resources/#arduino-displays","text":"This course has a narrow focus using displays with the Arduino. We have many labs that use low-cost OLED displays to create fun low-cost games that students can easily put in a backpack and take to school. The pong game is a favorite with our students.","title":"Arduino Displays"},{"location":"resources/#moving-rainbow","text":"This site has many projects that use the low-cost Arduino Nano and LED strips. We are in the process of moving the content to support mkdocs on GitHub pages. The site also has teaching materials for your own events. Arduino Moving Rainbow .","title":"Moving Rainbow"},{"location":"resources/#coderdojo-robots","text":"This site has many projects base on the low-cost ($25) CoderDojo Arduino Robot Kit. $25 Robot Platform for Teaching Programming on Instructables CoderDojo Robots","title":"CoderDojo Robots"},{"location":"display/00-intro/","text":"Adruino Displays New low-cost OLED displays are a great way to make your Arduino projects more interactive and fun. These labs introduce you to these displays and show you how to integrate them into your projects. OLED Basics Drawing Libraries Pong Game Pulse Width Modulation Demo","title":"Introduction"},{"location":"display/00-intro/#adruino-displays","text":"New low-cost OLED displays are a great way to make your Arduino projects more interactive and fun. These labs introduce you to these displays and show you how to integrate them into your projects.","title":"Adruino Displays"},{"location":"display/00-intro/#oled-basics","text":"","title":"OLED Basics"},{"location":"display/00-intro/#drawing-libraries","text":"","title":"Drawing Libraries"},{"location":"display/00-intro/#pong-game","text":"","title":"Pong Game"},{"location":"display/00-intro/#pulse-width-modulation-demo","text":"","title":"Pulse Width Modulation Demo"},{"location":"nano/00-intro/","text":"Arduino Nano Introduction Why Use the Nano Low Cost Breadboard Friendly Small Package Enough Inputs and Outputs for Most Beginning Projects Required Parts List","title":"Arduino Nano Introduction"},{"location":"nano/00-intro/#arduino-nano-introduction","text":"","title":"Arduino Nano Introduction"},{"location":"nano/00-intro/#why-use-the-nano","text":"","title":"Why Use the Nano"},{"location":"nano/00-intro/#low-cost","text":"","title":"Low Cost"},{"location":"nano/00-intro/#breadboard-friendly","text":"","title":"Breadboard Friendly"},{"location":"nano/00-intro/#small-package","text":"","title":"Small Package"},{"location":"nano/00-intro/#enough-inputs-and-outputs-for-most-beginning-projects","text":"","title":"Enough Inputs and Outputs for Most Beginning Projects"},{"location":"nano/00-intro/#required-parts-list","text":"","title":"Required Parts List"},{"location":"nano/01-blink/","text":"Arduino Blink Circuit Code Setup Main Loop Full Code References","title":"Blink"},{"location":"nano/01-blink/#arduino-blink","text":"","title":"Arduino Blink"},{"location":"nano/01-blink/#circuit","text":"","title":"Circuit"},{"location":"nano/01-blink/#code","text":"","title":"Code"},{"location":"nano/01-blink/#setup","text":"","title":"Setup"},{"location":"nano/01-blink/#main-loop","text":"","title":"Main Loop"},{"location":"nano/01-blink/#full-code","text":"","title":"Full Code"},{"location":"nano/01-blink/#references","text":"","title":"References"},{"location":"nano/02-three-leds/","text":"Arduino Blink Circuit Code Setup Main Loop Full Code References","title":"Three LEDs"},{"location":"nano/02-three-leds/#arduino-blink","text":"","title":"Arduino Blink"},{"location":"nano/02-three-leds/#circuit","text":"","title":"Circuit"},{"location":"nano/02-three-leds/#code","text":"","title":"Code"},{"location":"nano/02-three-leds/#setup","text":"","title":"Setup"},{"location":"nano/02-three-leds/#main-loop","text":"","title":"Main Loop"},{"location":"nano/02-three-leds/#full-code","text":"","title":"Full Code"},{"location":"nano/02-three-leds/#references","text":"","title":"References"},{"location":"nano/03-blink-speed-pot/","text":"Arduino Blink Speed with Potentiometer Circuit Code Setup Main Loop Full Code References","title":"Blink Speed Pot"},{"location":"nano/03-blink-speed-pot/#arduino-blink-speed-with-potentiometer","text":"","title":"Arduino Blink Speed with Potentiometer"},{"location":"nano/03-blink-speed-pot/#circuit","text":"","title":"Circuit"},{"location":"nano/03-blink-speed-pot/#code","text":"","title":"Code"},{"location":"nano/03-blink-speed-pot/#setup","text":"","title":"Setup"},{"location":"nano/03-blink-speed-pot/#main-loop","text":"","title":"Main Loop"},{"location":"nano/03-blink-speed-pot/#full-code","text":"","title":"Full Code"},{"location":"nano/03-blink-speed-pot/#references","text":"","title":"References"},{"location":"nano/04-rgb-leds/","text":"Arduino RGB LED Lab Circuit Code preamble int redPin = 11 ; int greenPin = 10 ; int bluePin = 9 ; Setup void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); } Main Loop Full Code References https://create.arduino.cc/projecthub/muhammad-aqib/arduino-rgb-led-tutorial-fc003e","title":"RGB LEDs"},{"location":"nano/04-rgb-leds/#arduino-rgb-led-lab","text":"","title":"Arduino RGB LED Lab"},{"location":"nano/04-rgb-leds/#circuit","text":"","title":"Circuit"},{"location":"nano/04-rgb-leds/#code","text":"","title":"Code"},{"location":"nano/04-rgb-leds/#preamble","text":"int redPin = 11 ; int greenPin = 10 ; int bluePin = 9 ;","title":"preamble"},{"location":"nano/04-rgb-leds/#setup","text":"void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); }","title":"Setup"},{"location":"nano/04-rgb-leds/#main-loop","text":"","title":"Main Loop"},{"location":"nano/04-rgb-leds/#full-code","text":"","title":"Full Code"},{"location":"nano/04-rgb-leds/#references","text":"https://create.arduino.cc/projecthub/muhammad-aqib/arduino-rgb-led-tutorial-fc003e","title":"References"},{"location":"nano/05-ping/","text":"Arduino Ping Lab Ultrasonic Distance Sensor Circuit Code Setup Main Loop Full Code References https://www.arduino.cc/en/tutorial/ping","title":"Ping"},{"location":"nano/05-ping/#arduino-ping-lab","text":"Ultrasonic Distance Sensor","title":"Arduino Ping Lab"},{"location":"nano/05-ping/#circuit","text":"","title":"Circuit"},{"location":"nano/05-ping/#code","text":"","title":"Code"},{"location":"nano/05-ping/#setup","text":"","title":"Setup"},{"location":"nano/05-ping/#main-loop","text":"","title":"Main Loop"},{"location":"nano/05-ping/#full-code","text":"","title":"Full Code"},{"location":"nano/05-ping/#references","text":"https://www.arduino.cc/en/tutorial/ping","title":"References"},{"location":"nano/07-servo/","text":"Arduino Servo https://www.tutorialspoint.com/arduino/arduino_servo_motor.htm","title":"Servo"},{"location":"nano/07-servo/#arduino-servo","text":"https://www.tutorialspoint.com/arduino/arduino_servo_motor.htm","title":"Arduino Servo"},{"location":"tinkercad/00-intro/","text":"Learning to Program Arduino with Tinkercad(TM) We will be using Autocad's web-based tool TinkerCad(TM) to learn how to program with an Arduino. This is a good way to get started if you are doing online mentoring or if you have difficulty installing customized Arduino drivers or the Arduino IDE on your computer. Here are the labs we will do: Blink Make a single LED go on and off. We will also learn about how to wire up an LED using a current limiting resistor so we don't burn out our LEDs. You can go to the lab by clicking here or use the navigation menu on the left to get to this lab. Blink Three LEDs Make two or more LEDs blink with various patterns. Click here to go to the lab. Change Blink Speed with a Potentiometer Use a potentiometer to change the frequency of a flashing LED. Click here RGB LED Use an RGB LED to make all the colors of the rainbow. Click here Ping Sensor Measure the distance using an ultrasonic ping sensor. This will be very useful when we want to build a collision-avoidance robot. Photo Sensor Use a photoresistor to measure how much light is present in a room.","title":"Introduction"},{"location":"tinkercad/00-intro/#learning-to-program-arduino-with-tinkercadtm","text":"We will be using Autocad's web-based tool TinkerCad(TM) to learn how to program with an Arduino. This is a good way to get started if you are doing online mentoring or if you have difficulty installing customized Arduino drivers or the Arduino IDE on your computer. Here are the labs we will do:","title":"Learning to Program Arduino with Tinkercad(TM)"},{"location":"tinkercad/00-intro/#blink","text":"Make a single LED go on and off. We will also learn about how to wire up an LED using a current limiting resistor so we don't burn out our LEDs. You can go to the lab by clicking here or use the navigation menu on the left to get to this lab.","title":"Blink"},{"location":"tinkercad/00-intro/#blink-three-leds","text":"Make two or more LEDs blink with various patterns. Click here to go to the lab.","title":"Blink Three LEDs"},{"location":"tinkercad/00-intro/#change-blink-speed-with-a-potentiometer","text":"Use a potentiometer to change the frequency of a flashing LED. Click here","title":"Change Blink Speed with a Potentiometer"},{"location":"tinkercad/00-intro/#rgb-led","text":"Use an RGB LED to make all the colors of the rainbow. Click here","title":"RGB LED"},{"location":"tinkercad/00-intro/#ping-sensor","text":"Measure the distance using an ultrasonic ping sensor. This will be very useful when we want to build a collision-avoidance robot.","title":"Ping Sensor"},{"location":"tinkercad/00-intro/#photo-sensor","text":"Use a photoresistor to measure how much light is present in a room.","title":"Photo Sensor"},{"location":"tinkercad/00-tinkercad-account-setup/","text":"Setting up Your Tinkercad(TM) Account Tinkercad(TM) allows each student to have their own account so that you can keep programs that you have created and come back to them in the future. Before you begin you should go to the Tinkercad web site and create a new account for each student. Tinkercad Web Site Once you have an account setup, make sure you know how to clink on the Properties gear icon of each lab to make it public if you want to share it with other mentors and students. B Focus on Tinkercad Circuits Tinkercad was originally created to teach web-based Computer-Aided Design (CAD). Later Tinkercad added support for Arduino. However, you must be sure to navigate to the Circuits section of Tinkercad before you begin creating Arduino circuits. Setting Circuit Properties Unfortunately, the current Tinkercad web application has some problems with usability for first time users. There are also no tutorials and minimal help available online. It is not intuitive how to change the properties of a circuit lab to make it public. Here are the detailed steps to change the properties of a lab so you can share it with other students and mentors: Open the list of your circuits view Move your mouse over the selected lab. You must do this because the option \"gear\" is not visible when you just view all your labs. Click on the Setting Gear control in the upper right of your lab Select the \"Properties\" menu item When you have the properties menu visible The images below show you what these look like: Getting to the Circuit Options: Selecting the Circuit Properties: Setting the Circuit Properties If you want to share your circuit, set the to Public . If you forget this step, others will not be able to see your circuits. We also encourage our CoderDojo mentors to use the following license: Tinkercad Knowledge Base Tinkercad has a list of frequently asked questions: [https://tinkercad.zendesk.com/hc/en-us/sections/115002539667-Tinkercad-Circuits] (https://tinkercad.zendesk.com/hc/en-us/sections/115002539667-Tinkercad-Circuits) Tinkercad Gallery of Circuits We encourage our mentors and students to explore the gallery of Tinkercad circuits. Here is a link that will provide you some sample circuits you can modify. https://www.tinkercad.com/learn/project-gallery;collectionId=OMOZACHJ9IR8LRE","title":"Tinkercad Account"},{"location":"tinkercad/00-tinkercad-account-setup/#setting-up-your-tinkercadtm-account","text":"Tinkercad(TM) allows each student to have their own account so that you can keep programs that you have created and come back to them in the future. Before you begin you should go to the Tinkercad web site and create a new account for each student. Tinkercad Web Site Once you have an account setup, make sure you know how to clink on the Properties gear icon of each lab to make it public if you want to share it with other mentors and students. B","title":"Setting up Your Tinkercad(TM) Account"},{"location":"tinkercad/00-tinkercad-account-setup/#focus-on-tinkercad-circuits","text":"Tinkercad was originally created to teach web-based Computer-Aided Design (CAD). Later Tinkercad added support for Arduino. However, you must be sure to navigate to the Circuits section of Tinkercad before you begin creating Arduino circuits.","title":"Focus on Tinkercad Circuits"},{"location":"tinkercad/00-tinkercad-account-setup/#setting-circuit-properties","text":"Unfortunately, the current Tinkercad web application has some problems with usability for first time users. There are also no tutorials and minimal help available online. It is not intuitive how to change the properties of a circuit lab to make it public. Here are the detailed steps to change the properties of a lab so you can share it with other students and mentors: Open the list of your circuits view Move your mouse over the selected lab. You must do this because the option \"gear\" is not visible when you just view all your labs. Click on the Setting Gear control in the upper right of your lab Select the \"Properties\" menu item When you have the properties menu visible The images below show you what these look like:","title":"Setting Circuit Properties"},{"location":"tinkercad/00-tinkercad-account-setup/#getting-to-the-circuit-options","text":"","title":"Getting to the Circuit Options:"},{"location":"tinkercad/00-tinkercad-account-setup/#selecting-the-circuit-properties","text":"","title":"Selecting the Circuit Properties:"},{"location":"tinkercad/00-tinkercad-account-setup/#setting-the-circuit-properties","text":"If you want to share your circuit, set the to Public . If you forget this step, others will not be able to see your circuits. We also encourage our CoderDojo mentors to use the following license:","title":"Setting the Circuit Properties"},{"location":"tinkercad/00-tinkercad-account-setup/#tinkercad-knowledge-base","text":"Tinkercad has a list of frequently asked questions: [https://tinkercad.zendesk.com/hc/en-us/sections/115002539667-Tinkercad-Circuits] (https://tinkercad.zendesk.com/hc/en-us/sections/115002539667-Tinkercad-Circuits)","title":"Tinkercad Knowledge Base"},{"location":"tinkercad/00-tinkercad-account-setup/#tinkercad-gallery-of-circuits","text":"We encourage our mentors and students to explore the gallery of Tinkercad circuits. Here is a link that will provide you some sample circuits you can modify. https://www.tinkercad.com/learn/project-gallery;collectionId=OMOZACHJ9IR8LRE","title":"Tinkercad Gallery of Circuits"},{"location":"tinkercad/01-blink/","text":"Arduino Blink Lab In this lab, we will learn how to make a Light Emitting Diode (LED) turn on and off at various speeds. The Blink lab is kind of like \"Hello world!\" in Arduino: it is the first program most students learn. Getting blink working is not always easy. You will need to become familiar with using Tinkercad and entering code into the system before you can run the example. LED Connections The LED has two connectors on it. But you should never connect both the wires directly to power. That will burn out the LED. The LED has a negative side (called the Cathode) and a positive site (called the Anode). It is important that you always put a proper resistor in the path of the circuit to limit the current. In the case of a standard 5 volt Arduino we will use a 330-ohm resistor to limit the current to the LED. It is important that you don't confuse these two sides. If you don't hook them up correctly your circuit will not work! Here is a picture of the cathode and anode of an LED. Remembering Cathode and Anode Sometimes you can use a picture to help you remember which end is the cathode and which one is the anode. I try to think of a short black \"cat\" to remember the negative cathode. I also try to think of my friend Ann who is tall and loves red when I think of the Anode. Here is a picture that you can use to remember this idea: Sometimes it is hard to remember which side is which. You Circuit Diagram Here is the circuit diagram we will use for our blink lab. You can create this using the following steps: Step 1: Create a New Circuit Go to the left navigation area and click the Circuits and press the green Create New Circuit button: Step 2: Add an Arduino Uno Go to the right search area and type in \"Arduino\". You should see the following image: Now clink on the image and use your mouse to drag the icon of the Arduino to the main central area of your screen. Step 3: Add the LED and the resistor Now go back to the right-side search area and enter \"LED\". You should see an image like this: Note that in this diagram, the straight wire on the left is the cathode which goes to GND pin on the Arduino. The bent pin on the right is anode which goes through a resistor and then to a digital output pin. Step 4: Add the Resistor and Set it to be 330 ohms Finally, we will also add a resistor to our circuit. Go to the right side, type in \"resistor\" and you should see an image like this: Unlike the LED, the resistor is just a generic component but we must next set the value of the resistor to be 330-ohms. We do this by clicking directly on the resistor in the circuit diagram and changing the value in the inspector region of the screen: Note that the resistor should be set to be 220-ohms. Make sure you set both the number to be 220 and the value to be ohms (not kiloohms). Step 5: Make the connections Now we have our three components on the screen. We are ready to hook them up. First, lets connect the left side of the LED (the cathode) to the GND or ground negative pin of the Arduino. Once you have the wire connected you can select it and you will be able to change the color. My convention, any wire that go to GND are typically colord black. Now drag the 330 ohm resistor so it connect to the right pin of the LED and then add Your circuit should look like the following diagram: Code Almost all Arduino programs have two main functions: A setup function that runs once when the Aruduino powers up A loop function that runs continually until the power is turned off (or the reset is triggered) The Setup Function void setup () { pinMode ( 13 , OUTPUT ); } In our blink program the setup function just sets pin 13 as an output pin. That is pretty simple. You will notice that the word setup is followed by an open and a closed parenthesis. This is to indicate that there are no parameters going into the function. The Loop Function The loom function will do four functions Turn the voltage of pin 13 HIGH (+5 volts) Wait one second (1000 milliseconds) using the delay function Turn the voltage of pin 13 LOW (ground or 0 volts) Wait one second again It repeats the on/off every second continually until the power is turned off. void loop () { digitalWrite ( 13 , HIGH ); delay ( 1000 ); // Wait for 1000 millisecond(s) digitalWrite ( 13 , LOW ); delay ( 1000 ); } The Full Program Here is the full program: void setup () { pinMode ( 13 , OUTPUT ); } void loop () { digitalWrite ( 13 , HIGH ); delay ( 1000 ); // Wait for 1000 millisecond(s) digitalWrite ( 13 , LOW ); delay ( 1000 ); } You can type this into the Tinkercad program or do a copy here and paste it into the code area. Working example on Tinkercad Blink on Tinkercad Experiments What happens if you change the delay times (currently set at 1000) to be 100? What happens if you change the delay times to be 50? What happens if you change the delay times to be 20? What happens if you change the delay times to be 10? Can you still see the blinking at all? Food for thought Most movies are shown around shown at 24 frames per second? Why do you think they picked this speed? If you hook up a photo sensor to a florescent light bulb you will see that it flickers 120 times per second. Household current runs at half this rate (60 times per second). Why do you think that the light flicker rate is twice the frequency? Hint: draw a wave that goes positive and negative. Look up Sine Wave in Wikipedia. What did you learn about the human eye? If you would like to learn more about LED circuits here is a Wikipedia Article on LED Circuits","title":"Blink"},{"location":"tinkercad/01-blink/#arduino-blink-lab","text":"In this lab, we will learn how to make a Light Emitting Diode (LED) turn on and off at various speeds. The Blink lab is kind of like \"Hello world!\" in Arduino: it is the first program most students learn. Getting blink working is not always easy. You will need to become familiar with using Tinkercad and entering code into the system before you can run the example.","title":"Arduino Blink Lab"},{"location":"tinkercad/01-blink/#led-connections","text":"The LED has two connectors on it. But you should never connect both the wires directly to power. That will burn out the LED. The LED has a negative side (called the Cathode) and a positive site (called the Anode). It is important that you always put a proper resistor in the path of the circuit to limit the current. In the case of a standard 5 volt Arduino we will use a 330-ohm resistor to limit the current to the LED. It is important that you don't confuse these two sides. If you don't hook them up correctly your circuit will not work! Here is a picture of the cathode and anode of an LED.","title":"LED Connections"},{"location":"tinkercad/01-blink/#remembering-cathode-and-anode","text":"Sometimes you can use a picture to help you remember which end is the cathode and which one is the anode. I try to think of a short black \"cat\" to remember the negative cathode. I also try to think of my friend Ann who is tall and loves red when I think of the Anode. Here is a picture that you can use to remember this idea: Sometimes it is hard to remember which side is which. You","title":"Remembering Cathode and Anode"},{"location":"tinkercad/01-blink/#circuit-diagram","text":"Here is the circuit diagram we will use for our blink lab. You can create this using the following steps:","title":"Circuit Diagram"},{"location":"tinkercad/01-blink/#step-1-create-a-new-circuit","text":"Go to the left navigation area and click the Circuits and press the green Create New Circuit button:","title":"Step 1: Create a New Circuit"},{"location":"tinkercad/01-blink/#step-2-add-an-arduino-uno","text":"Go to the right search area and type in \"Arduino\". You should see the following image: Now clink on the image and use your mouse to drag the icon of the Arduino to the main central area of your screen.","title":"Step 2: Add an Arduino Uno"},{"location":"tinkercad/01-blink/#step-3-add-the-led-and-the-resistor","text":"Now go back to the right-side search area and enter \"LED\". You should see an image like this: Note that in this diagram, the straight wire on the left is the cathode which goes to GND pin on the Arduino. The bent pin on the right is anode which goes through a resistor and then to a digital output pin.","title":"Step 3: Add the LED and the resistor"},{"location":"tinkercad/01-blink/#step-4-add-the-resistor-and-set-it-to-be-330-ohms","text":"Finally, we will also add a resistor to our circuit. Go to the right side, type in \"resistor\" and you should see an image like this: Unlike the LED, the resistor is just a generic component but we must next set the value of the resistor to be 330-ohms. We do this by clicking directly on the resistor in the circuit diagram and changing the value in the inspector region of the screen: Note that the resistor should be set to be 220-ohms. Make sure you set both the number to be 220 and the value to be ohms (not kiloohms).","title":"Step 4: Add the Resistor and Set it to be 330 ohms"},{"location":"tinkercad/01-blink/#step-5-make-the-connections","text":"Now we have our three components on the screen. We are ready to hook them up. First, lets connect the left side of the LED (the cathode) to the GND or ground negative pin of the Arduino. Once you have the wire connected you can select it and you will be able to change the color. My convention, any wire that go to GND are typically colord black. Now drag the 330 ohm resistor so it connect to the right pin of the LED and then add Your circuit should look like the following diagram:","title":"Step 5: Make the connections"},{"location":"tinkercad/01-blink/#code","text":"Almost all Arduino programs have two main functions: A setup function that runs once when the Aruduino powers up A loop function that runs continually until the power is turned off (or the reset is triggered)","title":"Code"},{"location":"tinkercad/01-blink/#the-setup-function","text":"void setup () { pinMode ( 13 , OUTPUT ); } In our blink program the setup function just sets pin 13 as an output pin. That is pretty simple. You will notice that the word setup is followed by an open and a closed parenthesis. This is to indicate that there are no parameters going into the function.","title":"The Setup Function"},{"location":"tinkercad/01-blink/#the-loop-function","text":"The loom function will do four functions Turn the voltage of pin 13 HIGH (+5 volts) Wait one second (1000 milliseconds) using the delay function Turn the voltage of pin 13 LOW (ground or 0 volts) Wait one second again It repeats the on/off every second continually until the power is turned off. void loop () { digitalWrite ( 13 , HIGH ); delay ( 1000 ); // Wait for 1000 millisecond(s) digitalWrite ( 13 , LOW ); delay ( 1000 ); }","title":"The Loop Function"},{"location":"tinkercad/01-blink/#the-full-program","text":"Here is the full program: void setup () { pinMode ( 13 , OUTPUT ); } void loop () { digitalWrite ( 13 , HIGH ); delay ( 1000 ); // Wait for 1000 millisecond(s) digitalWrite ( 13 , LOW ); delay ( 1000 ); } You can type this into the Tinkercad program or do a copy here and paste it into the code area.","title":"The Full Program"},{"location":"tinkercad/01-blink/#working-example-on-tinkercad","text":"Blink on Tinkercad","title":"Working example on Tinkercad"},{"location":"tinkercad/01-blink/#experiments","text":"What happens if you change the delay times (currently set at 1000) to be 100? What happens if you change the delay times to be 50? What happens if you change the delay times to be 20? What happens if you change the delay times to be 10? Can you still see the blinking at all?","title":"Experiments"},{"location":"tinkercad/01-blink/#food-for-thought","text":"Most movies are shown around shown at 24 frames per second? Why do you think they picked this speed? If you hook up a photo sensor to a florescent light bulb you will see that it flickers 120 times per second. Household current runs at half this rate (60 times per second). Why do you think that the light flicker rate is twice the frequency? Hint: draw a wave that goes positive and negative. Look up Sine Wave in Wikipedia. What did you learn about the human eye? If you would like to learn more about LED circuits here is a Wikipedia Article on LED Circuits","title":"Food for thought"},{"location":"tinkercad/02-blink-three-leds/","text":"Arduino Blink Three LEDs In this lab, we will learn how to make three LEDs of different color blink on and off. We will be replicating the same blink circuit in the prior lab for a red, a green and a blue LED. LED Connections The LED circuit is below. Just like the blink lab, each LED will have a black wire from the cathode of the LED to GND. The Anode of each LED will go through a resistor before it connects to one of the Arduino digital output pins. We will be using pin 13, 12 and 11 (left to right) on the Arduino. Here is a picture of red, green, blue LED circuit. Circuit Diagram Here is the circuit diagram we will use for our blink lab. Code The Setup Function Our setup function will be similar to the blink lab except instead of just one output pin, we will have three. The pins are 13, 12 and 11. void setup () { pinMode ( 13 , OUTPUT ); pinMode ( 12 , OUTPUT ); pinMode ( 11 , OUTPUT ); } The Loop Function The loop function will first turn on and off the red LED on pin 13, just like in the blink lab. We can then copy and paste the four lines of code right after itself to control the red LED on pin 12. After we paste code in we will need to change the pin number from 13 to 12. We will repeat this process and copy and paste four lines for pin 11, the blue pin. void loop () { // turn the red LED on pin 13 on and off digitalWrite ( 13 , HIGH ); delay ( 1000 ); digitalWrite ( 13 , LOW ); delay ( 1000 ); // turn the green LED on pin 12 on and off digitalWrite ( 12 , HIGH ); delay ( 1000 ); digitalWrite ( 12 , LOW ); delay ( 1000 ); // turn the blue LED on pin 11 on and off digitalWrite ( 11 , HIGH ); delay ( 1000 ); digitalWrite ( 11 , LOW ); delay ( 1000 ); } The Full Program Here is the full program: void setup () { pinMode ( 13 , OUTPUT ); pinMode ( 12 , OUTPUT ); pinMode ( 11 , OUTPUT ); } void loop () { // turn the red LED on pin 13 on and off digitalWrite ( 13 , HIGH ); delay ( 1000 ); digitalWrite ( 13 , LOW ); delay ( 1000 ); // turn the green LED on pin 12 on and off digitalWrite ( 12 , HIGH ); delay ( 1000 ); digitalWrite ( 12 , LOW ); delay ( 1000 ); // turn the blue LED on pin 11 on and off digitalWrite ( 11 , HIGH ); delay ( 1000 ); digitalWrite ( 11 , LOW ); delay ( 1000 ); } You can type this into the Tinkercad program or do a copy here and paste it into the code area. Working example on Tinkercad Blink Three LEDs Experiments When the first LED turns off there is a pause of one second before the second gree LED turns on. How would you change the loop() function so that immediately after the first red LED goes off the second green LED goes on? How many places in the program do you have to change to make pattern speed up or slow down? Could you use a variable to allow you to make a change at a single location in the program to adjust the speed?","title":"Blink Three LEDs"},{"location":"tinkercad/02-blink-three-leds/#arduino-blink-three-leds","text":"In this lab, we will learn how to make three LEDs of different color blink on and off. We will be replicating the same blink circuit in the prior lab for a red, a green and a blue LED.","title":"Arduino Blink Three LEDs"},{"location":"tinkercad/02-blink-three-leds/#led-connections","text":"The LED circuit is below. Just like the blink lab, each LED will have a black wire from the cathode of the LED to GND. The Anode of each LED will go through a resistor before it connects to one of the Arduino digital output pins. We will be using pin 13, 12 and 11 (left to right) on the Arduino. Here is a picture of red, green, blue LED circuit.","title":"LED Connections"},{"location":"tinkercad/02-blink-three-leds/#circuit-diagram","text":"Here is the circuit diagram we will use for our blink lab.","title":"Circuit Diagram"},{"location":"tinkercad/02-blink-three-leds/#code","text":"","title":"Code"},{"location":"tinkercad/02-blink-three-leds/#the-setup-function","text":"Our setup function will be similar to the blink lab except instead of just one output pin, we will have three. The pins are 13, 12 and 11. void setup () { pinMode ( 13 , OUTPUT ); pinMode ( 12 , OUTPUT ); pinMode ( 11 , OUTPUT ); }","title":"The Setup Function"},{"location":"tinkercad/02-blink-three-leds/#the-loop-function","text":"The loop function will first turn on and off the red LED on pin 13, just like in the blink lab. We can then copy and paste the four lines of code right after itself to control the red LED on pin 12. After we paste code in we will need to change the pin number from 13 to 12. We will repeat this process and copy and paste four lines for pin 11, the blue pin. void loop () { // turn the red LED on pin 13 on and off digitalWrite ( 13 , HIGH ); delay ( 1000 ); digitalWrite ( 13 , LOW ); delay ( 1000 ); // turn the green LED on pin 12 on and off digitalWrite ( 12 , HIGH ); delay ( 1000 ); digitalWrite ( 12 , LOW ); delay ( 1000 ); // turn the blue LED on pin 11 on and off digitalWrite ( 11 , HIGH ); delay ( 1000 ); digitalWrite ( 11 , LOW ); delay ( 1000 ); }","title":"The Loop Function"},{"location":"tinkercad/02-blink-three-leds/#the-full-program","text":"Here is the full program: void setup () { pinMode ( 13 , OUTPUT ); pinMode ( 12 , OUTPUT ); pinMode ( 11 , OUTPUT ); } void loop () { // turn the red LED on pin 13 on and off digitalWrite ( 13 , HIGH ); delay ( 1000 ); digitalWrite ( 13 , LOW ); delay ( 1000 ); // turn the green LED on pin 12 on and off digitalWrite ( 12 , HIGH ); delay ( 1000 ); digitalWrite ( 12 , LOW ); delay ( 1000 ); // turn the blue LED on pin 11 on and off digitalWrite ( 11 , HIGH ); delay ( 1000 ); digitalWrite ( 11 , LOW ); delay ( 1000 ); } You can type this into the Tinkercad program or do a copy here and paste it into the code area.","title":"The Full Program"},{"location":"tinkercad/02-blink-three-leds/#working-example-on-tinkercad","text":"Blink Three LEDs","title":"Working example on Tinkercad"},{"location":"tinkercad/02-blink-three-leds/#experiments","text":"When the first LED turns off there is a pause of one second before the second gree LED turns on. How would you change the loop() function so that immediately after the first red LED goes off the second green LED goes on? How many places in the program do you have to change to make pattern speed up or slow down? Could you use a variable to allow you to make a change at a single location in the program to adjust the speed?","title":"Experiments"},{"location":"tinkercad/03-change-blink-speed/","text":"Arduino Change Blink Speed with Potentiometer In this lab we will use a potentiometer to make an LED change its blink speed. The circuit will be similar to the blink lab with the addition of a potentiometer that has its middle wire going into analog input port A0. Creating the Circuit Start with the Blink Lab Here is the circuit diagram we will use for our blink lab. Add the Potentiometer Connect the Potentiometer Code In the first programs we only had a simple setup and a loop. But this progam will also need to add a variable declaration before the setup. Declaring a Variable We will need to declare a variable to hold the value of the potentiometer. In C we will need to declare that it is of type integer with the int . int sensorValue = 0 ; The Setup Function Just like the Blink Lab, we will need to make pin 13 be an digital OUTPUT pin. But in this lab we also need to set the Analog pin A0 to be an INPUT port. void setup () { pinMode ( 13 , OUTPUT ); pinMode ( A0 , INPUT ); } The Loop Function The loom function will do perform the following steps Read the value of the potentiometer Wait a delay time which is the value of potentiometer using the delay function The potentiometer will have a value from 0 to 1023. A value of near zero will flash so fast we will not be able to see it. A value near 1023 will be a value which is around 1000 milliseconds or about one second. void loop () { sensorValue = analogRead ( A0 ); digitalWrite ( 13 , HIGH ); delay ( sensorValue ); digitalWrite ( 13 , LOW ); delay ( sensorValue ); } The Full Program Here is the full program: int sensorValue = 0 ; void setup () { pinMode ( 13 , OUTPUT ); pinMode ( A0 , INPUT ); } void loop () { sensorValue = analogRead ( A0 ); digitalWrite ( 13 , HIGH ); delay ( sensorValue ); digitalWrite ( 13 , LOW ); delay ( sensorValue ); } You can type this into the Tinkercad program or do a copy here and paste it into the code area. Working example on Tinkercad Blink on Tinkercad Experiments Can you add a potentiometer to the three LED lab to change its speed?","title":"Use Pot to Change Blink Speed"},{"location":"tinkercad/03-change-blink-speed/#arduino-change-blink-speed-with-potentiometer","text":"In this lab we will use a potentiometer to make an LED change its blink speed. The circuit will be similar to the blink lab with the addition of a potentiometer that has its middle wire going into analog input port A0.","title":"Arduino Change Blink Speed with Potentiometer"},{"location":"tinkercad/03-change-blink-speed/#creating-the-circuit","text":"","title":"Creating the Circuit"},{"location":"tinkercad/03-change-blink-speed/#start-with-the-blink-lab","text":"Here is the circuit diagram we will use for our blink lab.","title":"Start with the Blink Lab"},{"location":"tinkercad/03-change-blink-speed/#add-the-potentiometer","text":"","title":"Add the Potentiometer"},{"location":"tinkercad/03-change-blink-speed/#connect-the-potentiometer","text":"","title":"Connect the Potentiometer"},{"location":"tinkercad/03-change-blink-speed/#code","text":"In the first programs we only had a simple setup and a loop. But this progam will also need to add a variable declaration before the setup.","title":"Code"},{"location":"tinkercad/03-change-blink-speed/#declaring-a-variable","text":"We will need to declare a variable to hold the value of the potentiometer. In C we will need to declare that it is of type integer with the int . int sensorValue = 0 ;","title":"Declaring a Variable"},{"location":"tinkercad/03-change-blink-speed/#the-setup-function","text":"Just like the Blink Lab, we will need to make pin 13 be an digital OUTPUT pin. But in this lab we also need to set the Analog pin A0 to be an INPUT port. void setup () { pinMode ( 13 , OUTPUT ); pinMode ( A0 , INPUT ); }","title":"The Setup Function"},{"location":"tinkercad/03-change-blink-speed/#the-loop-function","text":"The loom function will do perform the following steps Read the value of the potentiometer Wait a delay time which is the value of potentiometer using the delay function The potentiometer will have a value from 0 to 1023. A value of near zero will flash so fast we will not be able to see it. A value near 1023 will be a value which is around 1000 milliseconds or about one second. void loop () { sensorValue = analogRead ( A0 ); digitalWrite ( 13 , HIGH ); delay ( sensorValue ); digitalWrite ( 13 , LOW ); delay ( sensorValue ); }","title":"The Loop Function"},{"location":"tinkercad/03-change-blink-speed/#the-full-program","text":"Here is the full program: int sensorValue = 0 ; void setup () { pinMode ( 13 , OUTPUT ); pinMode ( A0 , INPUT ); } void loop () { sensorValue = analogRead ( A0 ); digitalWrite ( 13 , HIGH ); delay ( sensorValue ); digitalWrite ( 13 , LOW ); delay ( sensorValue ); } You can type this into the Tinkercad program or do a copy here and paste it into the code area.","title":"The Full Program"},{"location":"tinkercad/03-change-blink-speed/#working-example-on-tinkercad","text":"Blink on Tinkercad","title":"Working example on Tinkercad"},{"location":"tinkercad/03-change-blink-speed/#experiments","text":"Can you add a potentiometer to the three LED lab to change its speed?","title":"Experiments"},{"location":"tinkercad/04-rgb-led/","text":"RGB LED Lab In this lab, we will learn how to make an RGB (Red-Green-Blue) LED display different colors by mixing red, green, and blue light. Concepts RGB LED An RGB LED is actually three small LEDs \u2014 one red, one green and one blue \u2014 inside a normal LED housing. The RGB LED included in this kit has all the internal LEDs share the same ground wire, so there are four legs in total. To turn one color on, ensure ground is connected, then power one of the legs just as you would a regular LED. If you turn on more than one color at a time, you will see the colors start to blend together to form a new color. Just like a regular LED, an RGB LED is polarized and only allows electricity to flow in one direction. Pay close attention to the flat edge and to the different length legs. Both are indicators to help orient the LED correctly. Here is a picture of an RGB LED with the legs labeled: Varying Color and Brightness Using Analog Output (Pulse-Width Modulation) In Circuit 3, you learned about analog output versus digital output. Now you are going to apply this knowledge to creating different colors of varying brightness. You can use the digitalWrite() command to turn pins on the Arduino on (5V) or off (0V), but what if you want to output 2.5V? The Arduino doesn't have an analog output, but it is really good at switching some digital pins on and off fast enough to simulate an analog output. analogWrite() can output 2.5 volts by quickly switching a pin on and off so that the pin is only on 50 percent of the time (50% of 5V is 2.5V). By changing the percent of time that a pin is on, from 0 percent (always off) to 100 percent (always on), analogWrite() can output any voltage between 0 and 5V. This is what is known as pulse-width modulation (or PWM). By using PWM, you can create many different colors with the RGB LED. Only a few of the digital pins on the Uno and RedBoard have the circuitry needed to turn on and off fast enough for PWM. These are pins 3, 5, 6, 9, 10 and 11. Each PWM pin is marked with a ~ on the board. Remember, you can only use analogWrite() on these pins. Circuit Diagram Here is the circuit diagram we will use for our lab: Code Using analogWrite The analogWrite function outputs a voltage between 0 and 5V to a pin. The function breaks the range between 0 and 5V into 255 little steps. That means each 50 steps corresponds to an increase of about 1 volt. By varying the voltage that gets sent to the red, green, and blue pins that are connected to the legs of the RGB LED, you can create 16,777,216 different colors. That's a lot of color! Creating Your Own Simple Functions When programmers want to use a piece of code over and over again, they write a function . The simplest functions are just chunks of code that you give a name to. When you want to run that code, you can \u201ccall\u201d the function by typing its name, instead of writing out all of the code. More complicated functions take and return pieces of information from the program (we call these pieces of information parameters ). In this circuit, you'll write functions to turn the RGB LED different colors by just typing that color's name. Here is a function that turns the RBG LED red: void red () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 0 ); } The Full Program Here is the full program: // LEDs are connected to these pins int RedPin = 9 ; int GreenPin = 10 ; int BluePin = 11 ; void setup () { // Set the LED pins to output pinMode ( RedPin , OUTPUT ); pinMode ( GreenPin , OUTPUT ); pinMode ( BluePin , OUTPUT ); } void loop () { // Show each color for a second red (); delay ( 1000 ); orange (); delay ( 1000 ); yellow (); delay ( 1000 ); green (); delay ( 1000 ); cyan (); delay ( 1000 ); blue (); delay ( 1000 ); magenta (); delay ( 1000 ); // Turn the LED off for a second before starting over again turnOff (); delay ( 1000 ); } /** Set the LED pins to values that make red. */ void red () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 0 ); } /** Set the LED pins to values that make orange. */ void orange () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 50 ); analogWrite ( BluePin , 0 ); } /** Set the LED pins to values that make yellow. */ void yellow () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 100 ); analogWrite ( BluePin , 0 ); } /** Set the LED pins to values that make green. */ void green () { analogWrite ( RedPin , 0 ); analogWrite ( GreenPin , 100 ); analogWrite ( BluePin , 0 ); } /** Set the LED pins to values that make cyan. */ void cyan () { analogWrite ( RedPin , 0 ); analogWrite ( GreenPin , 100 ); analogWrite ( BluePin , 100 ); } /** Set the LED pins to values that make blue */ void blue () { analogWrite ( RedPin , 0 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 100 ); } /** Set the LED pins to values that make magenta. */ void magenta () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 100 ); } /** Set all three LED pins to 0 or OFF */ void turnOff () { analogWrite ( RedPin , 0 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 0 ); } You can type this into the Tinkercad program or copy this code and paste it into the Tinkercad code area. Working Example on Tinkercad RGB LED on Tinkercad Experiments Can you create your own function to turn the RGB LED a different color? Can you turn the RGB LED white? Note that we are not turning the LED on to full brightness (255) in this code so that the light is not too bright. Try changing these values and see what happens. Food for Thought Why is it that to get white light, you mix red, green, and blue in equal amounts, but mixing red, green, and blue paint will not get you white paint? If you would like to learn more about mixing light, here is a Wikipedia Article on Color Mixing","title":"RGB LED Lab"},{"location":"tinkercad/04-rgb-led/#rgb-led-lab","text":"In this lab, we will learn how to make an RGB (Red-Green-Blue) LED display different colors by mixing red, green, and blue light.","title":"RGB LED Lab"},{"location":"tinkercad/04-rgb-led/#concepts","text":"","title":"Concepts"},{"location":"tinkercad/04-rgb-led/#rgb-led","text":"An RGB LED is actually three small LEDs \u2014 one red, one green and one blue \u2014 inside a normal LED housing. The RGB LED included in this kit has all the internal LEDs share the same ground wire, so there are four legs in total. To turn one color on, ensure ground is connected, then power one of the legs just as you would a regular LED. If you turn on more than one color at a time, you will see the colors start to blend together to form a new color. Just like a regular LED, an RGB LED is polarized and only allows electricity to flow in one direction. Pay close attention to the flat edge and to the different length legs. Both are indicators to help orient the LED correctly. Here is a picture of an RGB LED with the legs labeled:","title":"RGB LED"},{"location":"tinkercad/04-rgb-led/#varying-color-and-brightness-using-analog-output-pulse-width-modulation","text":"In Circuit 3, you learned about analog output versus digital output. Now you are going to apply this knowledge to creating different colors of varying brightness. You can use the digitalWrite() command to turn pins on the Arduino on (5V) or off (0V), but what if you want to output 2.5V? The Arduino doesn't have an analog output, but it is really good at switching some digital pins on and off fast enough to simulate an analog output. analogWrite() can output 2.5 volts by quickly switching a pin on and off so that the pin is only on 50 percent of the time (50% of 5V is 2.5V). By changing the percent of time that a pin is on, from 0 percent (always off) to 100 percent (always on), analogWrite() can output any voltage between 0 and 5V. This is what is known as pulse-width modulation (or PWM). By using PWM, you can create many different colors with the RGB LED. Only a few of the digital pins on the Uno and RedBoard have the circuitry needed to turn on and off fast enough for PWM. These are pins 3, 5, 6, 9, 10 and 11. Each PWM pin is marked with a ~ on the board. Remember, you can only use analogWrite() on these pins.","title":"Varying Color and Brightness Using Analog Output (Pulse-Width Modulation)"},{"location":"tinkercad/04-rgb-led/#circuit-diagram","text":"Here is the circuit diagram we will use for our lab:","title":"Circuit Diagram"},{"location":"tinkercad/04-rgb-led/#code","text":"","title":"Code"},{"location":"tinkercad/04-rgb-led/#using-analogwrite","text":"The analogWrite function outputs a voltage between 0 and 5V to a pin. The function breaks the range between 0 and 5V into 255 little steps. That means each 50 steps corresponds to an increase of about 1 volt. By varying the voltage that gets sent to the red, green, and blue pins that are connected to the legs of the RGB LED, you can create 16,777,216 different colors. That's a lot of color!","title":"Using analogWrite"},{"location":"tinkercad/04-rgb-led/#creating-your-own-simple-functions","text":"When programmers want to use a piece of code over and over again, they write a function . The simplest functions are just chunks of code that you give a name to. When you want to run that code, you can \u201ccall\u201d the function by typing its name, instead of writing out all of the code. More complicated functions take and return pieces of information from the program (we call these pieces of information parameters ). In this circuit, you'll write functions to turn the RGB LED different colors by just typing that color's name. Here is a function that turns the RBG LED red: void red () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 0 ); }","title":"Creating Your Own Simple Functions"},{"location":"tinkercad/04-rgb-led/#the-full-program","text":"Here is the full program: // LEDs are connected to these pins int RedPin = 9 ; int GreenPin = 10 ; int BluePin = 11 ; void setup () { // Set the LED pins to output pinMode ( RedPin , OUTPUT ); pinMode ( GreenPin , OUTPUT ); pinMode ( BluePin , OUTPUT ); } void loop () { // Show each color for a second red (); delay ( 1000 ); orange (); delay ( 1000 ); yellow (); delay ( 1000 ); green (); delay ( 1000 ); cyan (); delay ( 1000 ); blue (); delay ( 1000 ); magenta (); delay ( 1000 ); // Turn the LED off for a second before starting over again turnOff (); delay ( 1000 ); } /** Set the LED pins to values that make red. */ void red () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 0 ); } /** Set the LED pins to values that make orange. */ void orange () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 50 ); analogWrite ( BluePin , 0 ); } /** Set the LED pins to values that make yellow. */ void yellow () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 100 ); analogWrite ( BluePin , 0 ); } /** Set the LED pins to values that make green. */ void green () { analogWrite ( RedPin , 0 ); analogWrite ( GreenPin , 100 ); analogWrite ( BluePin , 0 ); } /** Set the LED pins to values that make cyan. */ void cyan () { analogWrite ( RedPin , 0 ); analogWrite ( GreenPin , 100 ); analogWrite ( BluePin , 100 ); } /** Set the LED pins to values that make blue */ void blue () { analogWrite ( RedPin , 0 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 100 ); } /** Set the LED pins to values that make magenta. */ void magenta () { analogWrite ( RedPin , 100 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 100 ); } /** Set all three LED pins to 0 or OFF */ void turnOff () { analogWrite ( RedPin , 0 ); analogWrite ( GreenPin , 0 ); analogWrite ( BluePin , 0 ); } You can type this into the Tinkercad program or copy this code and paste it into the Tinkercad code area.","title":"The Full Program"},{"location":"tinkercad/04-rgb-led/#working-example-on-tinkercad","text":"RGB LED on Tinkercad","title":"Working Example on Tinkercad"},{"location":"tinkercad/04-rgb-led/#experiments","text":"Can you create your own function to turn the RGB LED a different color? Can you turn the RGB LED white? Note that we are not turning the LED on to full brightness (255) in this code so that the light is not too bright. Try changing these values and see what happens.","title":"Experiments"},{"location":"tinkercad/04-rgb-led/#food-for-thought","text":"Why is it that to get white light, you mix red, green, and blue in equal amounts, but mixing red, green, and blue paint will not get you white paint? If you would like to learn more about mixing light, here is a Wikipedia Article on Color Mixing","title":"Food for Thought"},{"location":"tinkercad-neopixel/00-intro/","text":"CoderDojo Twin Cities NeoPixel Project Every year since 2014, the local Twin Cities hosts a full-day hackathon designed to get kids interested in coding and STEM concepts. One of our most successful projects has been our LED costume contest. At these events, we purchase Arduinos, breadboards and LED strips for our students. The come to the events at around 10am and by 2pm many of them have learned how to program their LEDs to power their costumes in a variety of different patterns. During the COVID pandemic we are moving this event to be online so that everyone can still learn to program the LED strips even though they don't have the physical devices. For each of our labs, we now have a working Tinkercad version that you can use online. Here is a list of our labs. Blink an LED A simple lab to get started. Students have to build a simple circuit using Tinkercad using and Arduino, an LED strip and three wires. They then have to write a short Arduino program to make the first LED blink red. Link to Lab 1: Tinkercad Neopixel LED Strip Blink Lab Move the LED Move the LED forward and back Change the colors of the LED","title":"Introduction"},{"location":"tinkercad-neopixel/00-intro/#coderdojo-twin-cities-neopixel-project","text":"Every year since 2014, the local Twin Cities hosts a full-day hackathon designed to get kids interested in coding and STEM concepts. One of our most successful projects has been our LED costume contest. At these events, we purchase Arduinos, breadboards and LED strips for our students. The come to the events at around 10am and by 2pm many of them have learned how to program their LEDs to power their costumes in a variety of different patterns. During the COVID pandemic we are moving this event to be online so that everyone can still learn to program the LED strips even though they don't have the physical devices. For each of our labs, we now have a working Tinkercad version that you can use online. Here is a list of our labs.","title":"CoderDojo Twin Cities NeoPixel Project"},{"location":"tinkercad-neopixel/00-intro/#blink-an-led","text":"A simple lab to get started. Students have to build a simple circuit using Tinkercad using and Arduino, an LED strip and three wires. They then have to write a short Arduino program to make the first LED blink red. Link to Lab 1: Tinkercad Neopixel LED Strip Blink Lab","title":"Blink an LED"},{"location":"tinkercad-neopixel/00-intro/#move-the-led","text":"","title":"Move the LED"},{"location":"tinkercad-neopixel/00-intro/#move-the-led-forward-and-back","text":"","title":"Move the LED forward and back"},{"location":"tinkercad-neopixel/00-intro/#change-the-colors-of-the-led","text":"","title":"Change the colors of the LED"},{"location":"tinkercad-neopixel/01-blink/","text":"Neopixel Blink In this lab, our goal is to duplicate the functionality of the classic single LED blink lab. We will only make the first pixel of a NeoPixel strip turn the red LED on and off. Circuit Code Preamble #include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); Setup In our setup function we need to initialize the NeoPixel data structure. This will allocate enough memory to store the state of the pixels. We will need to allocate enough RAM to store an eight-bit (one byte) value for each red, green and blue light intensity level for each of our pixels. void setup () { pixels . begin (); } Main Loop Our main loop will do the following steps: It will set the red value of the first pixel (pixel 0) to be its full brightness: 255. It will then send this value to the LED strip using the pixels.show()) It will then pause a half-second or 500 milliseconds using the delay(500) function. It will then et the red value of the first pixel (pixel 0) to be off a value of 0. It will then pause for another half-second. void loop () { pixels . setPixelColor ( 0 , 255 , 0 , 0 ); pixels . show (); delay ( 500 ); pixels . setPixelColor ( 0 , 0 , 0 , 0 ); pixels . show (); delay ( 500 ); } ### Full Code ``` C #include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); void setup () { pixels . begin (); } void loop () { pixels . setPixelColor ( 0 , 255 , 0 , 0 ); pixels . show (); delay ( 500 ); pixels . setPixelColor ( 0 , 0 , 0 , 0 ); pixels . show (); delay ( 500 ); } Link Working Example https://www.tinkercad.com/things/9N27JUfFSCe Experiments What happens if you change the last three numbers in pixels.setPixelColor() function?: From: pixels.setPixelColor(i, 255, 0, 0); To: pixels.setPixelColor(i, 0, 255, 0); Or: pixels.setPixelColor(i, 0, 0, 255);","title":"Blink"},{"location":"tinkercad-neopixel/01-blink/#neopixel-blink","text":"In this lab, our goal is to duplicate the functionality of the classic single LED blink lab. We will only make the first pixel of a NeoPixel strip turn the red LED on and off.","title":"Neopixel Blink"},{"location":"tinkercad-neopixel/01-blink/#circuit","text":"","title":"Circuit"},{"location":"tinkercad-neopixel/01-blink/#code","text":"","title":"Code"},{"location":"tinkercad-neopixel/01-blink/#preamble","text":"#include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 );","title":"Preamble"},{"location":"tinkercad-neopixel/01-blink/#setup","text":"In our setup function we need to initialize the NeoPixel data structure. This will allocate enough memory to store the state of the pixels. We will need to allocate enough RAM to store an eight-bit (one byte) value for each red, green and blue light intensity level for each of our pixels. void setup () { pixels . begin (); }","title":"Setup"},{"location":"tinkercad-neopixel/01-blink/#main-loop","text":"Our main loop will do the following steps: It will set the red value of the first pixel (pixel 0) to be its full brightness: 255. It will then send this value to the LED strip using the pixels.show()) It will then pause a half-second or 500 milliseconds using the delay(500) function. It will then et the red value of the first pixel (pixel 0) to be off a value of 0. It will then pause for another half-second. void loop () { pixels . setPixelColor ( 0 , 255 , 0 , 0 ); pixels . show (); delay ( 500 ); pixels . setPixelColor ( 0 , 0 , 0 , 0 ); pixels . show (); delay ( 500 ); } ### Full Code ``` C #include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); void setup () { pixels . begin (); } void loop () { pixels . setPixelColor ( 0 , 255 , 0 , 0 ); pixels . show (); delay ( 500 ); pixels . setPixelColor ( 0 , 0 , 0 , 0 ); pixels . show (); delay ( 500 ); }","title":"Main Loop"},{"location":"tinkercad-neopixel/01-blink/#link-working-example","text":"https://www.tinkercad.com/things/9N27JUfFSCe","title":"Link Working Example"},{"location":"tinkercad-neopixel/01-blink/#experiments","text":"What happens if you change the last three numbers in pixels.setPixelColor() function?: From: pixels.setPixelColor(i, 255, 0, 0); To: pixels.setPixelColor(i, 0, 255, 0); Or: pixels.setPixelColor(i, 0, 0, 255);","title":"Experiments"},{"location":"tinkercad-neopixel/02-move/","text":"Neopixel Move In this lab, our goal is to make a red LED appear to move up and down the LED strip. We will do this by using a the main arduino loop to turn each pixel on and off. Circuit We will use the same Arduino circuit at we used in the NeoPixel blink lab. Code Preamble ans Setup The preamble and setup will be identical to our blink lab. Make sure you have the number of pixels set to 12 and the right pin number. The Main Loop Our main loop will use a single for statuement. The for statement has three parameters: The initialization of the for loop where we set our index counter (i) to be 0. The condition that we use to exit the for loop. In this case we will be testing to see if our index is still less than the number of pixels NUMPIXELS The function that we will run after each for loop finishes. In this case we will increment our index by 1 with the i++ operator. Inside each loop we will turn on each pixel on for just 1/10 of a second. This is done with the setPixelColor function that turns on the red LED to 255 followed by the pixels.show() function. The delay(100) is for delaying the LED for 100 milliseconds or 1/10th of a full second. We then turn off the red pixel value. Here is the main loop code: void loop () { for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); // turn red on pixels . show (); // send to the LED strip delay ( 100 ); // delay 1/10th of a second pixels . setPixelColor ( i , 0 , 0 , 0 ); // turn red off } } Full Program #include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); void setup () { pixels . begin (); } void loop () { for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); pixels . show (); delay ( 100 ); pixels . setPixelColor ( i , 0 , 0 , 0 ); } } Link Working Example Link to Move Lab #2 on Tinkercad Experiments What happens if you change the value of the parameter in the delay(100) function in the main loop? What happens if you change it from the new value to be 50? What if you change it to be 200? What happens if you change the last three numbers in the first line of the for loop: From: pixels.setPixelColor(i, 255, 0, 0); To: pixels.setPixelColor(i, 0, 255, 0); Or: pixels.setPixelColor(i, 0, 0, 255);","title":"Move"},{"location":"tinkercad-neopixel/02-move/#neopixel-move","text":"In this lab, our goal is to make a red LED appear to move up and down the LED strip. We will do this by using a the main arduino loop to turn each pixel on and off.","title":"Neopixel Move"},{"location":"tinkercad-neopixel/02-move/#circuit","text":"We will use the same Arduino circuit at we used in the NeoPixel blink lab.","title":"Circuit"},{"location":"tinkercad-neopixel/02-move/#code","text":"","title":"Code"},{"location":"tinkercad-neopixel/02-move/#preamble-ans-setup","text":"The preamble and setup will be identical to our blink lab. Make sure you have the number of pixels set to 12 and the right pin number.","title":"Preamble ans Setup"},{"location":"tinkercad-neopixel/02-move/#the-main-loop","text":"Our main loop will use a single for statuement. The for statement has three parameters: The initialization of the for loop where we set our index counter (i) to be 0. The condition that we use to exit the for loop. In this case we will be testing to see if our index is still less than the number of pixels NUMPIXELS The function that we will run after each for loop finishes. In this case we will increment our index by 1 with the i++ operator. Inside each loop we will turn on each pixel on for just 1/10 of a second. This is done with the setPixelColor function that turns on the red LED to 255 followed by the pixels.show() function. The delay(100) is for delaying the LED for 100 milliseconds or 1/10th of a full second. We then turn off the red pixel value. Here is the main loop code: void loop () { for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); // turn red on pixels . show (); // send to the LED strip delay ( 100 ); // delay 1/10th of a second pixels . setPixelColor ( i , 0 , 0 , 0 ); // turn red off } }","title":"The Main Loop"},{"location":"tinkercad-neopixel/02-move/#full-program","text":"#include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); void setup () { pixels . begin (); } void loop () { for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); pixels . show (); delay ( 100 ); pixels . setPixelColor ( i , 0 , 0 , 0 ); } }","title":"Full Program"},{"location":"tinkercad-neopixel/02-move/#link-working-example","text":"Link to Move Lab #2 on Tinkercad","title":"Link Working Example"},{"location":"tinkercad-neopixel/02-move/#experiments","text":"What happens if you change the value of the parameter in the delay(100) function in the main loop? What happens if you change it from the new value to be 50? What if you change it to be 200? What happens if you change the last three numbers in the first line of the for loop: From: pixels.setPixelColor(i, 255, 0, 0); To: pixels.setPixelColor(i, 0, 255, 0); Or: pixels.setPixelColor(i, 0, 0, 255);","title":"Experiments"},{"location":"tinkercad-neopixel/03-back-and-forth/","text":"Neopixel Back and Forth In this lab, our goal is to make a single-pixel move down the LED strip and then go back. Circuit Code #include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); int delay_time = 200 ; // 200 msec = 1/5th of a second void setup () { pixels . begin (); } void loop () { // from left to right for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); pixels . show (); delay ( delay_time ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } // from right to left for ( int i = NUMPIXELS ; i > 0 ; i -- ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); pixels . show (); delay ( delay_time ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } } Link Working Example Link to Working Program on Tinkercad Experiments","title":"Back and Forth"},{"location":"tinkercad-neopixel/03-back-and-forth/#neopixel-back-and-forth","text":"In this lab, our goal is to make a single-pixel move down the LED strip and then go back.","title":"Neopixel Back and Forth"},{"location":"tinkercad-neopixel/03-back-and-forth/#circuit","text":"","title":"Circuit"},{"location":"tinkercad-neopixel/03-back-and-forth/#code","text":"#include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); int delay_time = 200 ; // 200 msec = 1/5th of a second void setup () { pixels . begin (); } void loop () { // from left to right for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); pixels . show (); delay ( delay_time ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } // from right to left for ( int i = NUMPIXELS ; i > 0 ; i -- ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); pixels . show (); delay ( delay_time ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } }","title":"Code"},{"location":"tinkercad-neopixel/03-back-and-forth/#link-working-example","text":"Link to Working Program on Tinkercad","title":"Link Working Example"},{"location":"tinkercad-neopixel/03-back-and-forth/#experiments","text":"","title":"Experiments"},{"location":"tinkercad-neopixel/04-rgb-back-and-forth/","text":"Neopixel Moving Red Green and Blue In this lab, our goal is to make a single-pixel move down the LED strip and then change color from red to green and blue. Circuit Code We will use the same code that we used in the Move lab. But we will repeat the for loop three times, one loop for each color. #include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); void setup () { pixels . begin (); } void loop () { for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); pixels . show (); delay ( 100 ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 0 , 255 , 0 ); pixels . show (); delay ( 100 ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 0 , 0 , 255 ); pixels . show (); delay ( 100 ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } } Link Working Example https://www.tinkercad.com/things/9N27JUfFSCe Experiments","title":"Move Red, Green, Blue"},{"location":"tinkercad-neopixel/04-rgb-back-and-forth/#neopixel-moving-red-green-and-blue","text":"In this lab, our goal is to make a single-pixel move down the LED strip and then change color from red to green and blue.","title":"Neopixel Moving Red Green and Blue"},{"location":"tinkercad-neopixel/04-rgb-back-and-forth/#circuit","text":"","title":"Circuit"},{"location":"tinkercad-neopixel/04-rgb-back-and-forth/#code","text":"We will use the same code that we used in the Move lab. But we will repeat the for loop three times, one loop for each color. #include <Adafruit_NeoPixel.h> #define PIN 2 #define NUMPIXELS 12 Adafruit_NeoPixel pixels = Adafruit_NeoPixel ( NUMPIXELS , PIN , NEO_GRB + NEO_KHZ800 ); void setup () { pixels . begin (); } void loop () { for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 255 , 0 , 0 ); pixels . show (); delay ( 100 ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 0 , 255 , 0 ); pixels . show (); delay ( 100 ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } for ( int i = 0 ; i < NUMPIXELS ; i ++ ){ pixels . setPixelColor ( i , 0 , 0 , 255 ); pixels . show (); delay ( 100 ); pixels . setPixelColor ( i , 0 , 0 , 0 ); pixels . show (); } }","title":"Code"},{"location":"tinkercad-neopixel/04-rgb-back-and-forth/#link-working-example","text":"https://www.tinkercad.com/things/9N27JUfFSCe","title":"Link Working Example"},{"location":"tinkercad-neopixel/04-rgb-back-and-forth/#experiments","text":"","title":"Experiments"},{"location":"uno/","text":"Arduino Uno Labs We are currently using the SparkFun Uno labs from their online guide. These guides are Blink In this lab we make an LED turn on and off every second. Sparkfun Inventors Kit Guide Blink Potentiometer We hook a potentiometer to our breadboard to change the frequency of the LED blinking. As you turn the know the speed of the blinking changes. We learn how to map the values from the input analog port into the a delay of the LED in milliseconds. Sparkfun Inventors Kit Guide Potentiometer Photoresistor This is the first lab where we sense the environment. A photoreistor is used to measure the amount of light. Sparkfun Inventors Kit Guide Photoresistor RGB LED Lab Our students LOVE these Red-Green-Blue LEDs since they can make any color of the rainbow by changing the combination of colors. Our Kits use common cathode LEDs. Sparkfun Inventors Kit Guide RGB Night Light Sound In this lab we use a combination of buttons and buttons to generate sounds. We can also create a Simon game with the LEDs and buttons. Sparkfun Inventors Kit Guide Sound Lab Ping Lab In this lab we use an ultrasonic distance sensor (called a ping sensor) to measure the distance between our sensor and an object in front of it. These sensors are low-cost (around $2 each) are are used in our robots. Sparkfun Inventors Kit Guide Sound Lab Servo Lab In this lab we use a low-cost servo motor to demonstrate how an Arduino can control the angle of a servo motor. parkfun Inventors Kit Servo Motor","title":"Introduction"},{"location":"uno/#arduino-uno-labs","text":"We are currently using the SparkFun Uno labs from their online guide. These guides are","title":"Arduino Uno Labs"},{"location":"uno/#blink","text":"In this lab we make an LED turn on and off every second. Sparkfun Inventors Kit Guide Blink","title":"Blink"},{"location":"uno/#potentiometer","text":"We hook a potentiometer to our breadboard to change the frequency of the LED blinking. As you turn the know the speed of the blinking changes. We learn how to map the values from the input analog port into the a delay of the LED in milliseconds. Sparkfun Inventors Kit Guide Potentiometer","title":"Potentiometer"},{"location":"uno/#photoresistor","text":"This is the first lab where we sense the environment. A photoreistor is used to measure the amount of light. Sparkfun Inventors Kit Guide Photoresistor","title":"Photoresistor"},{"location":"uno/#rgb-led-lab","text":"Our students LOVE these Red-Green-Blue LEDs since they can make any color of the rainbow by changing the combination of colors. Our Kits use common cathode LEDs. Sparkfun Inventors Kit Guide RGB Night Light","title":"RGB LED Lab"},{"location":"uno/#sound","text":"In this lab we use a combination of buttons and buttons to generate sounds. We can also create a Simon game with the LEDs and buttons. Sparkfun Inventors Kit Guide Sound Lab","title":"Sound"},{"location":"uno/#ping-lab","text":"In this lab we use an ultrasonic distance sensor (called a ping sensor) to measure the distance between our sensor and an object in front of it. These sensors are low-cost (around $2 each) are are used in our robots. Sparkfun Inventors Kit Guide Sound Lab","title":"Ping Lab"},{"location":"uno/#servo-lab","text":"In this lab we use a low-cost servo motor to demonstrate how an Arduino can control the angle of a servo motor. parkfun Inventors Kit Servo Motor","title":"Servo Lab"}]}